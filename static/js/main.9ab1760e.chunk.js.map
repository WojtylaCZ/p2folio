{"version":3,"sources":["common/enums.ts","core/platforms/models.ts","common/utils.ts","core/platforms/TwinoPlatform.ts","core/platforms/Platform.ts","core/platforms/ZonkyPlatform.ts","core/platforms/MintosPlatform.ts","core/platforms/utils.ts","components/DragAndDropFilesInput.tsx","components/platformSpecific/ZonkySpecificHeaderView.tsx","components/PortfolioHeaderView.tsx","components/PlatformHeaderView.tsx","components/ResultTable.tsx","components/PlatformView.tsx","components/PlatformListView.tsx","components/UploadFilesInput.tsx","components/App.tsx","index.tsx"],"names":["FileTypes","Currency","SupportedPlatformTypes","loadSelectedFile","file","cb","reader","FileReader","onerror","ex","console","log","onload","e","name","readAsArrayBuffer","getFirstWorkSheetFromRawFile","rawFile","content","Uint8Array","workbook","xlsx","read","type","Sheets","SheetNames","TwinoASFileColumnHeadersDefs","Platform","currency","monthlyResults","transactionLog","platformTotals","portfolioTotals","processingMonth","moment","this","getTransaction","transaction","dateTransaction","processingDate","isAfter","dateArray","toArray","newMonthMoment","unshift","month","result","getNewBaseResultFactory","Object","entries","transactionType","value","key","add","totals","deposit","Dinero","extraReceived","feesPaid","interestReceived","principalReceived","withdrawal","getPlatformTotals","amount","ZonkyASFileColumnHeadersDefs","TwinoPlatform","EUR","firstSheet","utils","sheet_to_json","header","dataColumnHeader","raw","blankrows","defval","range","reverse","transactionRecord","Date","getNewTransactionFactory","fullFilename","startsWith","platformFilenameSubstring","endsWith","platformFileType","platform","TWINO","XLSX","TransactionId","TransactionType","PaymentType","LoanId","ProcessingAmount","MintosASFileColumnHeadersDefs","ZonkyPlatform","CZK","ASFileColumnHeaders","getAmount","plaformFeePaid","secondaryMarketFeePaid","getInterestReceived","InterestReceived","multiply","getPrincipalReceived","PrincipalReceived","penalty","subtract","isZero","penaltyReceived","rawAmount","amountPrecision","length","indexOf","intAmount","Math","abs","parseInt","replace","precision","rawPrincipalReceived","principalReceivedPrecision","principalReceivedInt","includes","ZONKY","Direction","MintosPlatform","MINTOS","Details","Turnover","Balance","DragAndDropFilesInput","event","filename","props","onRawFileUploaded","target","stopPropagation","preventDefault","dataTransfer","dropEffect","files","onLoadHandler","bind","id","onDragOver","handleDragOver","onDrop","handleFileSelect","React","Component","ZonkySpecificHeaderView","platformData","toFormat","PortfolioHeaderView","getPortfolioTotals","PlatformHeaderView","platformSpecificHeader","ResultTable","className","renderTableHeader","renderTableData","map","index","monthResult","undefined","format","toUpperCase","PlatformView","PlatformListView","platformList","portfolioPlatforms","UploadFilesInput","multiple","onChange","onFileInputChange","App","state","isPlatformFileValid","Error","detectPlatform","parseASFile","processTransactions","setState","prevState","rawfile","handleUploadedRawFile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ab1760e.chunk.js","sourcesContent":["export enum FileTypes {\n  XLSX = '.xlsx',\n  XLS = '.xls',\n  CSV = '.csv',\n  PDF = '.pdf'\n  // RAW_TEXT = 'raw_text'\n}\n\nexport enum Currency {\n  CZK = 'CZK',\n  EUR = 'EUR'\n}\n","import { Moment } from 'moment';\n\nimport { MintosPlatform } from './MintosPlatform';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { IZonkyFeesPaid, IZonkyInterestReceived, ZonkyPlatform } from './ZonkyPlatform';\n\nexport type SupportedPlatform = MintosPlatform | TwinoPlatform | ZonkyPlatform;\n\nexport enum SupportedPlatformTypes {\n  MINTOS = 'mintos',\n  TWINO = 'twino',\n  ZONKY = 'zonky'\n}\n\nexport interface IPortfolioResult {\n  deposit: Dinero.Dinero;\n  withdrawal: Dinero.Dinero;\n  principalReceived: Dinero.Dinero;\n  interestReceived: Dinero.Dinero;\n  extraReceived: Dinero.Dinero;\n  feesPaid: Dinero.Dinero;\n}\n\nexport interface IBaseResult<ExtraReceived, InterestReceived, FeePaid> {\n  deposit: {\n    deposit?: Dinero.Dinero;\n  };\n  withdrawal: {\n    withdrawal?: Dinero.Dinero;\n  };\n  principalReceived: {\n    principalReceived?: Dinero.Dinero;\n  };\n  interestReceived: InterestReceived;\n  extraReceived: ExtraReceived;\n  feesPaid: FeePaid;\n}\n\nexport interface IMonthlyResults<ExtraReceived, InterestReceived, FeePaid> {\n  month: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid>;\n}\n\nexport interface ITransaction<ExtraReceived, InterestReceived, FeePaid> {\n  processingDate: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid>;\n}\n\nexport type IExtraReceivedOptions = {};\nexport type IInterestReceivedOptions = IZonkyInterestReceived;\n\nexport type IFeePaidOptions = IZonkyFeesPaid;\n","import xlsx from 'xlsx';\n\nexport function loadSelectedFile(file: File, cb: (event: any, filename: string) => void) {\n  const reader = new FileReader();\n  reader.onerror = ex => {\n    // FIXME\n    console.log(ex);\n  };\n  reader.onload = (e: any) => {\n    cb(e, file.name);\n  };\n  reader.readAsArrayBuffer(file);\n}\n\nexport function getFirstWorkSheetFromRawFile(rawFile: ArrayBuffer): xlsx.WorkSheet {\n  const content = new Uint8Array(rawFile);\n  const workbook = xlsx.read(content, { type: 'array' });\n  const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n  return firstSheet;\n}\n","import moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum TwinoASFileColumnHeadersDefs {\n  Date = 'ProcessingDate',\n  TransactionId = 'TransactionId',\n  TransactionType = 'TransactionType',\n  PaymentType = 'PaymentType',\n  LoanId = 'LoanId',\n  ProcessingAmount = 'ProcessingAmount'\n}\n\nexport class TwinoPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.TWINO;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.startsWith(TwinoPlatform.platformFilenameSubstring) && fullFilename.endsWith(TwinoPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'account_statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly dataColumnHeader = [\n    TwinoASFileColumnHeadersDefs.Date,\n    TwinoASFileColumnHeadersDefs.TransactionId,\n    TwinoASFileColumnHeadersDefs.TransactionType,\n    TwinoASFileColumnHeadersDefs.PaymentType,\n    TwinoASFileColumnHeadersDefs.LoanId,\n    TwinoASFileColumnHeadersDefs.ProcessingAmount\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: TwinoPlatform.dataColumnHeader,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 3\n    });\n    this.transactionLog = transactionLog.reverse();\n  }\n\n  protected *getTransaction(): IterableIterator<ITransaction<{}, {}, {}>> {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[TwinoASFileColumnHeadersDefs.Date], 'MM/DD/YY HH:mm');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    };\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\n\nimport { Currency } from '../../common/enums';\n\nimport { IBaseResult, IMonthlyResults, IPortfolioResult, ITransaction } from './models';\n\nexport abstract class Platform {\n  public abstract currency: Currency;\n\n  public monthlyResults: Array<IMonthlyResults<any, any, any>> = [];\n\n  protected transactionLog: any[] = [];\n\n  private platformTotals?: IBaseResult<any, any, any>;\n  private portfolioTotals?: IPortfolioResult;\n\n  public processTransactions() {\n    let processingMonth = moment(0);\n\n    for (const transaction of this.getTransaction()) {\n      const dateTransaction = transaction.processingDate;\n\n      if (dateTransaction.isAfter(processingMonth, 'month')) {\n        const dateArray = dateTransaction.toArray();\n        const newMonthMoment = moment(`${dateArray[0]}-${dateArray[1] + 1}-01`, 'YYYY-MM-DD');\n\n        this.monthlyResults.unshift({\n          month: newMonthMoment,\n          result: this.getNewBaseResultFactory()\n        });\n        processingMonth = newMonthMoment;\n      }\n\n      for (const [transactionType, value] of Object.entries<any>(transaction.result)) {\n        for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore TODO\n          this.monthlyResults[0].result[transactionType][key] = this.monthlyResults[0].result[transactionType][key].add(result);\n        }\n      }\n    }\n  }\n\n  public getPlatformTotals() {\n    if (this.platformTotals) {\n      return this.platformTotals;\n    } else {\n      const totals = this.getNewBaseResultFactory();\n      for (const month of this.monthlyResults) {\n        for (const [transactionType, value] of Object.entries<any>(month.result)) {\n          for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n            // @ts-ignore\n            totals[transactionType][key] = totals[transactionType][key].add(result);\n          }\n        }\n      }\n      this.platformTotals = totals;\n    }\n    return this.platformTotals;\n  }\n\n  public getPortfolioTotals() {\n    if (!this.portfolioTotals) {\n      const totals: IPortfolioResult = {\n        deposit: Dinero({ currency: this.currency }),\n        extraReceived: Dinero({ currency: this.currency }),\n        feesPaid: Dinero({ currency: this.currency }),\n        interestReceived: Dinero({ currency: this.currency }),\n        principalReceived: Dinero({ currency: this.currency }),\n        withdrawal: Dinero({ currency: this.currency })\n      };\n\n      const platformTotals = this.getPlatformTotals();\n\n      for (const [transactionType, value] of Object.entries(platformTotals)) {\n        for (const [, amount] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore\n          totals[transactionType] = totals[transactionType].add(amount);\n        }\n      }\n\n      this.portfolioTotals = totals;\n    }\n\n    return this.portfolioTotals;\n  }\n\n  protected abstract parseASFile(rawFile: ArrayBuffer): void;\n  protected abstract getTransaction(): IterableIterator<ITransaction<any, any, any>>;\n  protected abstract getNewBaseResultFactory(): IBaseResult<any, any, any>;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum ZonkyASFileColumnHeadersDefs {\n  Date = 'ProcessingDate',\n  Direction = 'Direction',\n  TransactionType = 'TransactionType',\n  ProcessingAmount = 'ProcessingAmount',\n  InterestReceived = 'InterestReceived',\n  PrincipalReceived = 'PrincipalReceived'\n}\n\nexport interface IZonkyFeesPaid {\n  plaformFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\nexport interface IZonkyInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class ZonkyPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.ZONKY;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(ZonkyPlatform.platformFilenameSubstring) && fullFilename.endsWith(ZonkyPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'transakce-';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    ZonkyASFileColumnHeadersDefs.Date,\n    ZonkyASFileColumnHeadersDefs.Direction,\n    ZonkyASFileColumnHeadersDefs.TransactionType,\n    ZonkyASFileColumnHeadersDefs.ProcessingAmount,\n    ZonkyASFileColumnHeadersDefs.PrincipalReceived,\n    ZonkyASFileColumnHeadersDefs.InterestReceived\n  ];\n\n  public currency = Currency.CZK;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: ZonkyPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 9\n    });\n    this.transactionLog = transactionLog;\n  }\n\n  public *getTransaction(): IterableIterator<ITransaction<{}, IZonkyInterestReceived, IZonkyFeesPaid>> {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[ZonkyASFileColumnHeadersDefs.Date], 'DD.MM.YYYY');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const amount = this.getAmount(transactionRecord[ZonkyASFileColumnHeadersDefs.ProcessingAmount], Currency.CZK);\n\n      switch (transactionRecord[ZonkyASFileColumnHeadersDefs.TransactionType]) {\n        case 'Poplatek za investování':\n          transaction.result.feesPaid.plaformFeePaid = amount;\n          break;\n        case 'Nabití vaší peněženky':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'Výběr z peněženky na váš účet':\n          transaction.result.withdrawal.withdrawal = amount;\n          break;\n        case 'Poplatek za prodej na sekundárním trhu':\n          transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n          break;\n        case 'Prodej na sekundárním trhu':\n          transaction.result.principalReceived.principalReceived = amount;\n          break;\n        case 'Vrácení platby':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          ).multiply(-1);\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          ).multiply(-1);\n          break;\n\n        case 'Splátka půjčky':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          );\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          );\n\n          const penalty = amount.subtract(\n            transaction.result.principalReceived.principalReceived.add(transaction.result.interestReceived.interestReceived)\n          );\n          if (!penalty.isZero()) {\n            transaction.result.interestReceived.penaltyReceived = penalty;\n          }\n\n          break;\n      }\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: { deposit: Dinero({ currency: this.currency }) },\n      extraReceived: {},\n      feesPaid: {\n        plaformFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {\n        principalReceived: Dinero({ currency: this.currency })\n      },\n      withdrawal: { withdrawal: Dinero({ currency: this.currency }) }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    const amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n\n  private getPrincipalReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n\n  private getInterestReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n}\n","import moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum MintosASFileColumnHeadersDefs {\n  TransactionId = 'TransactionId',\n  Date = 'Date',\n  Details = 'Details',\n  Turnover = 'Turnover',\n  Balance = 'Balance',\n  Currency = 'Currency'\n}\n\nexport class MintosPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.MINTOS;\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(MintosPlatform.platformFilenameSubstring) && fullFilename.endsWith(MintosPlatform.platformFileType)\n    );\n  }\n  private static readonly platformFilenameSubstring = 'account-statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    MintosASFileColumnHeadersDefs.TransactionId,\n    MintosASFileColumnHeadersDefs.Date,\n    MintosASFileColumnHeadersDefs.Details,\n    MintosASFileColumnHeadersDefs.Turnover,\n    MintosASFileColumnHeadersDefs.Balance,\n    MintosASFileColumnHeadersDefs.Currency\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: MintosPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 1\n    });\n    this.transactionLog = transactionLog;\n  }\n\n  protected *getTransaction(): IterableIterator<ITransaction<{}, {}, {}>> {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[MintosASFileColumnHeadersDefs.Date], 'YYYY-MM-DD HH:mm:ss');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    };\n  }\n}\n","import { Moment } from 'moment';\n\nimport { MintosPlatform } from './MintosPlatform';\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport function detectPlatform(filename: string): SupportedPlatformTypes {\n  if (MintosPlatform.isPlatformFileValid(filename)) {\n    return MintosPlatform.platform;\n  } else if (TwinoPlatform.isPlatformFileValid(filename)) {\n    return TwinoPlatform.platform;\n  } else if (ZonkyPlatform.isPlatformFileValid(filename)) {\n    return ZonkyPlatform.platform;\n  } else {\n    throw new Error('unknown file');\n  }\n}\n\nexport function getNewTransactionFactory(processingDate: Moment): ITransaction<any, any, any> {\n  return {\n    processingDate,\n    result: {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    }\n  };\n}\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass DragAndDropFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public handleDragOver(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public handleFileSelect(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = event.dataTransfer.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        id=\"drop_zone\"\n        onDragOver={e => {\n          this.handleDragOver(e);\n        }}\n        onDrop={e => this.handleFileSelect(e)}\n      >\n        Drop files here\n      </div>\n    );\n  }\n}\n\nexport default DragAndDropFilesInput;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst ZonkySpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  return (\n    <div>\n      <h2>Zonky - web statistics</h2>\n      <h4>\n        Vyděláno :\n        {totals.interestReceived.interestReceived\n          .add(totals.interestReceived.penaltyReceived)\n          .subtract(totals.feesPaid.plaformFeePaid)\n          .subtract(totals.feesPaid.secondaryMarketFeePaid)\n          .toFormat()}\n      </h4>\n\n      <h4>\n        Zaplaceno na poplatcích:\n        {totals.feesPaid.plaformFeePaid.add(totals.feesPaid.secondaryMarketFeePaid).toFormat()}\n      </h4>\n\n      <h4>\n        Úrok zaplacený:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </h4>\n      <h4>\n        Pokuty:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default ZonkySpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from './PlatformView';\n\nconst PortfolioHeaderView = (props: PlatformDataProps) => {\n  const portfolioTotals = props.platformData.getPortfolioTotals();\n  return (\n    <div>\n      <h2>P2Folio Totals</h2>\n      <h4>\n        Deposit:\n        {portfolioTotals.deposit.toFormat()}\n      </h4>\n      <h4>\n        Withdrawal:\n        {portfolioTotals.withdrawal.toFormat()}\n      </h4>\n      <h4>\n        Principal received:\n        {portfolioTotals.principalReceived!.toFormat()}\n      </h4>\n      <h4>\n        Interests:\n        {portfolioTotals.interestReceived!.toFormat()}\n      </h4>\n      <h4>\n        Fees paid:\n        {portfolioTotals.feesPaid!.toFormat()}\n      </h4>\n      <h4>\n        Extra received:\n        {portfolioTotals.extraReceived!.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default PortfolioHeaderView;\n","import React from 'react';\n\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport ZonkySpecificHeaderView from './platformSpecific/ZonkySpecificHeaderView';\nimport { PlatformDataProps } from './PlatformView';\nimport PortfolioHeaderView from './PortfolioHeaderView';\n\nconst PlatformHeaderView = (props: PlatformDataProps) => {\n  let platformSpecificHeader;\n\n  if (props.platformData instanceof ZonkyPlatform) {\n    platformSpecificHeader = <ZonkySpecificHeaderView platformData={props.platformData} />;\n  }\n\n  return (\n    <div>\n      <PortfolioHeaderView platformData={props.platformData} />\n      {platformSpecificHeader}\n    </div>\n  );\n};\nexport default PlatformHeaderView;\n","import Dinero from 'dinero.js';\nimport React from 'react';\n\nimport { IExtraReceivedOptions, IFeePaidOptions, IInterestReceivedOptions, IMonthlyResults } from '../core/platforms/models';\n\nimport { PlatformDataProps } from './PlatformView';\n\nclass ResultTable extends React.Component<PlatformDataProps> {\n  public render() {\n    return (\n      <div>\n        <table className=\"ui celled table\" id=\"students\">\n          <thead>\n            <tr>{this.renderTableHeader()}</tr>\n          </thead>\n          <tbody>{this.renderTableData()}</tbody>\n        </table>\n      </div>\n    );\n  }\n\n  private renderTableData() {\n    if (this.props.platformData.monthlyResults.length > 0) {\n      return this.props.platformData.monthlyResults.map(\n        (month: IMonthlyResults<IExtraReceivedOptions, IInterestReceivedOptions, IFeePaidOptions>, index: any) => {\n          const monthResult = {\n            deposit: undefined,\n            withdrawal: undefined,\n            feesPaid: undefined,\n            extraReceived: undefined,\n            interestReceived: undefined\n          } as any;\n\n          for (const [transactionType, value] of Object.entries(month.result)) {\n            for (const [, result] of Object.entries<Dinero.Dinero>(value)) {\n              if (monthResult[transactionType]) {\n                monthResult[transactionType].add(result);\n              } else {\n                monthResult[transactionType] = result;\n              }\n            }\n          }\n\n          return (\n            <tr key={index}>\n              <td>{month.month.format('MMM YYYY')}</td>\n              <td>{monthResult.deposit ? monthResult.deposit.toFormat() : ''}</td>\n              <td>{monthResult.withdrawal ? monthResult.withdrawal.toFormat() : ''}</td>\n              <td>{monthResult.interestReceived ? monthResult.interestReceived.toFormat() : ''}</td>\n              <td>{monthResult.feesPaid ? monthResult.feesPaid.toFormat() : ''}</td>\n              <td>{monthResult.extraReceived ? monthResult.extraReceived.toFormat() : ''}</td>\n            </tr>\n          );\n        }\n      );\n    } else {\n      return <tr key={0} />;\n    }\n  }\n\n  private renderTableHeader() {\n    return ['date', 'deposit', 'withdrawal', 'interestReceived', 'feesPaid', 'extraReceived'].map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  }\n}\n\nexport default ResultTable;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformHeaderView from './PlatformHeaderView';\nimport ResultTable from './ResultTable';\n\nexport type PlatformDataProps = {\n  platformData: SupportedPlatform;\n};\n\nconst PlatformView = (props: PlatformDataProps) => {\n  return (\n    <div>\n      <PlatformHeaderView platformData={props.platformData} />\n      <ResultTable platformData={props.platformData} />\n    </div>\n  );\n};\n\nexport default PlatformView;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformView from './PlatformView';\n\nexport type PortfolioPlatformsProps = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nconst PlatformListView = (props: PortfolioPlatformsProps) => {\n  const platformList = props.portfolioPlatforms.map((platform: SupportedPlatform, index: number) => {\n    return <PlatformView key={index} platformData={platform} />;\n  });\n\n  return <div className=\"platform-list\">{platformList}</div>;\n};\n\nexport default PlatformListView;\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass UploadFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public onFileInputChange(event: any) {\n    const files = event.target.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"ui segment\">\n        <input\n          type=\"file\"\n          multiple={true}\n          onChange={e => {\n            this.onFileInputChange(e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadFilesInput;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { SupportedPlatform, SupportedPlatformTypes } from '../core/platforms/models';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { detectPlatform } from '../core/platforms/utils';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport DragAndDropFilesInput from './DragAndDropFilesInput';\nimport PlatformListView from './PlatformListView';\nimport UploadFilesInput from './UploadFilesInput';\n\nexport type RawFileUploadedProps = {\n  onRawFileUploaded: (rawFile: ArrayBuffer, filename: string) => void;\n};\n\ntype AppState = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  public state = { portfolioPlatforms: [] };\n\n  public handleUploadedRawFile(rawFile: ArrayBuffer, filename: string) {\n    try {\n      const platformType = detectPlatform(filename);\n      let platformData: SupportedPlatform;\n\n      switch (platformType) {\n        case SupportedPlatformTypes.MINTOS:\n          platformData = new MintosPlatform();\n          break;\n        case SupportedPlatformTypes.TWINO:\n          platformData = new TwinoPlatform();\n          break;\n        case SupportedPlatformTypes.ZONKY:\n          platformData = new ZonkyPlatform();\n          break;\n        default:\n          throw Error('unknown platform');\n      }\n\n      platformData.parseASFile(rawFile);\n      platformData.processTransactions();\n\n      this.setState(prevState => ({\n        portfolioPlatforms: [...prevState.portfolioPlatforms, platformData]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>\n          <UploadFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          <DragAndDropFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          Account statements: {this.state.portfolioPlatforms ? this.state.portfolioPlatforms.length : '0'}\n        </div>\n        <div>\n          <PlatformListView portfolioPlatforms={this.state.portfolioPlatforms} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}