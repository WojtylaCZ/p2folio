{"version":3,"sources":["common/enums.ts","core/platforms/models.ts","common/utils.ts","core/platforms/TwinoPlatform.ts","core/platforms/Platform.ts","core/platforms/ZonkyPlatform.ts","core/platforms/MintosPlatform.ts","core/platforms/utils.ts","components/DragAndDropFilesInput.tsx","components/platformSpecific/MintosSpecificHeaderView.tsx","components/platformSpecific/TwinoSpecificHeaderView.tsx","components/platformSpecific/ZonkySpecificHeaderView.tsx","components/PortfolioHeaderView.tsx","components/PlatformHeaderView.tsx","components/ResultTable.tsx","components/PlatformView.tsx","components/PlatformsTabMenuView.tsx","components/UploadFilesInput.tsx","components/App.tsx","index.tsx"],"names":["FileTypes","Currency","SupportedPlatformTypes","loadSelectedFile","file","cb","reader","FileReader","onerror","ex","console","log","onload","e","name","readAsArrayBuffer","getFirstWorkSheetFromRawFile","rawFile","content","Uint8Array","workbook","xlsx","read","type","Sheets","SheetNames","TwinoASFileColumnHeadersDefs","Platform","currency","platform","monthlyResults","transactionLog","platformTotals","portfolioTotals","processingMonth","moment","this","getTransaction","transaction","dateTransaction","processingDate","isAfter","dateArray","toArray","newMonthMoment","unshift","month","result","getNewBaseResultFactory","Object","entries","transactionType","value","key","add","totals","deposit","Dinero","extraReceived","feesPaid","interestReceived","principalReceived","withdrawal","getPlatformTotals","amount","ZonkyASFileColumnHeadersDefs","TwinoPlatform","EUR","firstSheet","utils","sheet_to_json","header","dataColumnHeader","raw","blankrows","defval","range","reverse","transactionRecord","Date","getNewTransactionFactory","dataAmount","ProcessingAmount","amountPrecision","indexOf","length","intAmount","parseInt","replace","TransactionType","Math","abs","precision","PaymentType","penaltyReceived","fullFilename","startsWith","platformFilenameSubstring","endsWith","platformFileType","TWINO","XLSX","TransactionId","LoanId","MintosASFileColumnHeadersDefs","ZonkyPlatform","CZK","ASFileColumnHeaders","headerNotFound","rowNumber","splice","Error","getAmount","plaformFeePaid","secondaryMarketFeePaid","getInterestReceived","InterestReceived","multiply","getPrincipalReceived","PrincipalReceived","penalty","subtract","isZero","rawAmount","rawPrincipalReceived","principalReceivedPrecision","principalReceivedInt","includes","ZONKY","Direction","MintosPlatform","parseFloat","Turnover","toString","Details","referalReceived","cashbackReceived","currencyExchangeFeePaid","toLowerCase","incomingCurrencyExchange","outgoingCurrencyExchange","MINTOS","Balance","DragAndDropFilesInput","event","filename","props","onRawFileUploaded","target","stopPropagation","preventDefault","dataTransfer","dropEffect","files","onLoadHandler","bind","id","onDragOver","handleDragOver","onDrop","handleFileSelect","React","Component","MintosSpecificHeaderView","platformData","campaignRewards","toFormat","TwinoSpecificHeaderView","ZonkySpecificHeaderView","PortfolioHeaderView","getPortfolioTotals","PlatformHeaderView","platformSpecificHeader","ResultTable","renderTableHeader","renderTableData","map","index","monthResult","undefined","format","PlatformView","TabPanel","children","other","Typography","component","role","hidden","aria-labelledby","Box","p","a11yProps","PlatformsTabMenuView","useState","tabIndexValue","setTabIndexValue","platformViews","portfolioPlatforms","forEach","availablePlatforms","keys","Paper","square","Tabs","onChange","newTabIndexValue","aria-label","variant","Tab","label","disabled","style","paddingTop","UploadFilesInput","multiple","onFileInputChange","App","state","isPlatformFileValid","detectPlatform","parseASFile","processTransactions","setState","prevState","rel","href","className","width","height","viewBox","fill","color","position","top","border","right","zIndex","aria-hidden","d","transformOrigin","dangerouslySetInnerHTML","__html","AppBar","Toolbar","Grid","container","item","xs","rawfile","handleUploadedRawFile","ReactDOM","render","document","getElementById"],"mappings":"8QAAYA,EAQAC,ECOAC,E,iLCbL,SAASC,EAAiBC,EAAYC,GAC3C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,QAAU,SAAAC,GAEfC,QAAQC,IAAIF,IAEdH,EAAOM,OAAS,SAACC,GACfR,EAAGQ,EAAGT,EAAKU,OAEbR,EAAOS,kBAAkBX,GAGpB,SAASY,EAA6BC,GAC3C,IAAMC,EAAU,IAAIC,WAAWF,GACzBG,EAAWC,IAAKC,KAAKJ,EAAS,CAAEK,KAAM,UAE5C,OADmBH,EAASI,OAAOJ,EAASK,WAAW,K,SFjB7CzB,K,aAAAA,E,WAAAA,E,WAAAA,E,YAAAA,M,cAQAC,K,UAAAA,E,WAAAA,M,cCOAC,K,gBAAAA,E,cAAAA,E,eAAAA,M,SEJPwB,E,QCJiBC,EAAtB,iDACkBC,cADlB,OAE2BC,cAF3B,OAISC,eAAkE,GAJ3E,KAMYC,eAAwB,GANpC,KAQUC,oBARV,OASUC,qBATV,oEAYI,IAAIC,EAAkBC,IAAO,GADF,uBAG3B,YAA0BC,KAAKC,iBAA/B,+CAAiD,CAAC,IAAvCC,EAAsC,QACzCC,EAAkBD,EAAYE,eAEpC,GAAID,EAAgBE,QAAQP,EAAiB,SAAU,CACrD,IAAMQ,EAAYH,EAAgBI,UAC5BC,EAAiBT,IAAO,GAAD,OAAIO,EAAU,GAAd,YAAoBA,EAAU,GAAK,EAAnC,OAA2C,cAExEN,KAAKN,eAAee,QAAQ,CAC1BC,MAAOF,EACPG,OAAQX,KAAKY,4BAEfd,EAAkBU,EAGpB,cAAuCK,OAAOC,QAAaZ,EAAYS,QAAvE,eACE,IAD+E,IAAD,0BAApEI,EAAoE,KAAnDC,EAAmD,KAC9E,MAA4BH,OAAOC,QAAuBE,GAA1D,eAAkE,CAAC,IAAD,0BAAtDC,EAAsD,KAAjDN,EAAiD,KAEhEX,KAAKN,eAAe,GAAGiB,OAAOI,GAAiBE,GAAOjB,KAAKN,eAAe,GAAGiB,OAAOI,GAAiBE,GAAKC,IAAIP,KApBzF,qFAX/B,0CAsCI,IAAKX,KAAKJ,eAAgB,CACxB,IAAMuB,EAASnB,KAAKY,0BADI,uBAExB,YAAoBZ,KAAKN,eAAzB,+CACE,IADwC,IAA/BgB,EAA8B,QACvC,MAAuCG,OAAOC,QAAaJ,EAAMC,QAAjE,eACE,IADyE,IAAD,0BAA9DI,EAA8D,KAA7CC,EAA6C,KACxE,MAA4BH,OAAOC,QAAuBE,GAA1D,eAAkE,CAAC,IAAD,0BAAtDC,EAAsD,KAAjDN,EAAiD,KAEhEQ,EAAOJ,GAAiBE,GAAOE,EAAOJ,GAAiBE,GAAKC,IAAIP,IAN9C,kFAUxBX,KAAKJ,eAAiBuB,EAExB,OAAOnB,KAAKJ,iBAlDhB,2CAsDI,IAAKI,KAAKH,gBAAiB,CAYzB,IAXA,IAAMsB,EAA2B,CAC/BC,QAASC,YAAO,CAAE7B,SAAUQ,KAAKR,WACjC8B,cAAeD,YAAO,CAAE7B,SAAUQ,KAAKR,WACvC+B,SAAUF,YAAO,CAAE7B,SAAUQ,KAAKR,WAClCgC,iBAAkBH,YAAO,CAAE7B,SAAUQ,KAAKR,WAC1CiC,kBAAmBJ,YAAO,CAAE7B,SAAUQ,KAAKR,WAC3CkC,WAAYL,YAAO,CAAE7B,SAAUQ,KAAKR,YAGhCI,EAAiBI,KAAK2B,oBAE5B,MAAuCd,OAAOC,QAAQlB,GAAtD,eACE,IADsE,IAAD,0BAA3DmB,EAA2D,KAA1CC,EAA0C,KACrE,MAAyBH,OAAOC,QAAuBE,GAAvD,eAA+D,CAAC,IAAD,OAAjDY,EAAiD,oBAE7DT,EAAOJ,GAAmBI,EAAOJ,GAAiBG,IAAIU,GAI1D5B,KAAKH,gBAAkBsB,EAGzB,OAAOnB,KAAKH,oBA5EhB,M,SDIKP,K,uBAAAA,E,+BAAAA,E,uBAAAA,E,0BAAAA,E,qBAAAA,E,gCAAAA,M,KAcE,IEdFuC,EFcQC,EAAb,2MAoBkBrC,SAAWqC,EAAcrC,SApB3C,EAqBSD,SAAW3B,EAASkE,IArB7B,2EAuBqBlD,GACjB,IAAMmD,EAAapD,EAA6BC,GAE1Cc,EAAwBV,IAAKgD,MAAMC,cAAcF,EAAY,CACjEG,OAAQL,EAAcM,iBACtBC,KAAK,EACLC,WAAW,EACXC,OAAQ,EACRC,MAAO,IAETxC,KAAKL,eAAiBA,EAAe8C,YAjCzC,0KAuCoCzC,KAAKL,eAvCzC,kEAuCe+C,EAvCf,QAwCYtC,EAAiBL,IAAO2C,EAAkBpD,EAA6BqD,MAAO,kBAC9EzC,EAAc0C,EAAyBxC,GAEvCyC,EAAaH,EAAkBpD,EAA6BwD,kBAE9DC,EAAkB,EAClBF,EAAWG,QAAQ,MAAQ,IAC7BD,EAAkBF,EAAWI,QAAUJ,EAAWG,QAAQ,KAAO,IAE7DE,EAAYC,SAAST,EAAkBpD,EAA6BwD,kBAAkBM,QAAQ,MAAO,IAAK,IAjDtH,KAmDcV,EAAkBpD,EAA6B+D,iBAnD7D,OAoDa,YApDb,gCAqDcH,EAAY,EACdhD,EAAYS,OAAOS,QAAQA,QAAUC,YAAO,CAC1CO,OAAQ0B,KAAKC,IAAIL,GACjBM,UAAWT,EACXvD,SAAUQ,KAAKR,WAER0D,EAAY,IACrBhD,EAAYS,OAAOe,WAAWA,WAAaL,YAAO,CAChDO,OAAQ0B,KAAKC,IAAIL,GACjBM,UAAWT,EACXvD,SAAUQ,KAAKR,YA/D7B,kCAqEckD,EAAkBpD,EAA6BmE,aArE7D,OAsEa,YAtEb,QA6Ea,aA7Eb,gCAuEUvD,EAAYS,OAAOa,iBAAiBkC,gBAAkBrC,YAAO,CAC3DO,OAAQ0B,KAAKC,IAAIL,GACjBM,UAAWT,EACXvD,SAAUQ,KAAKR,WA1E3B,oCA8EUU,EAAYS,OAAOa,iBAAiBA,iBAAmBH,YAAO,CAC5DO,OAAQsB,EACRM,UAAWT,EACXvD,SAAUQ,KAAKR,WAjF3B,6BAsFM,OAtFN,UAsFYU,EAtFZ,+XA2FI,MAAO,CACLkB,QAAS,CACPA,QAASC,YAAO,CAAE7B,SAAUQ,KAAKR,YAEnC8B,cAAe,GACfC,SAAU,GACVC,iBAAkB,CAChBA,iBAAkBH,YAAO,CAAE7B,SAAUQ,KAAKR,WAC1CkE,gBAAiBrC,YAAO,CAAE7B,SAAUQ,KAAKR,YAE3CiC,kBAAmB,GACnBC,WAAY,CACVA,WAAYL,YAAO,CAAE7B,SAAUQ,KAAKR,gBAvG5C,2CAGoCmE,GAChC,OACEA,EAAaC,WAAW9B,EAAc+B,4BAA8BF,EAAaG,SAAShC,EAAciC,sBAL9G,GAAmCxE,GAAtBuC,EACYrC,SAAW3B,EAAuBkG,MAD9ClC,EASa+B,0BAA4B,oBATzC/B,EAUaiC,iBAAmBnG,EAAUqG,KAV1CnC,EAWaM,iBAAmB,CACzC9C,EAA6BqD,KAC7BrD,EAA6B4E,cAC7B5E,EAA6B+D,gBAC7B/D,EAA6BmE,YAC7BnE,EAA6B6E,OAC7B7E,EAA6BwD,kB,SE/B5BjB,K,aAAAA,E,sCAAAA,E,gCAAAA,E,kCAAAA,E,2BAAAA,E,6BAAAA,M,KAkBE,IClBFuC,EDkBQC,EAAb,2MAoBkB5E,SAAW4E,EAAc5E,SApB3C,EAqBSD,SAAW3B,EAASyG,IArB7B,2EAuBqBzF,GAYjB,IAXA,IAAMmD,EAAapD,EAA6BC,GAE1Cc,EAAwBV,IAAKgD,MAAMC,cAAcF,EAAY,CACjEG,OAAQkC,EAAcE,oBACtBlC,KAAK,EACLC,WAAW,EACXC,OAAQ,EACRC,MAAO,IAGLgC,GAAiB,EACZC,EAAY,EAAGA,EAAY,GAAIA,IACtC,GAAI9E,EAAe8E,GAAW5C,EAA6Bc,QAAUd,EAA6Bc,KAAM,CACtGhD,EAAe+E,OAAO,EAAGD,EAAY,GACrCD,GAAiB,EACjB,MAGJ,GAAIA,EACF,MAAMG,MAAM,yBAEd3E,KAAKL,eAAiBA,IA7C1B,wKAmDoCK,KAAKL,eAnDzC,kEAmDe+C,EAnDf,QAoDYtC,EAAiBL,IAAO2C,EAAkBb,EAA6Bc,MAAO,cAC9EzC,EAAc0C,EAAyBxC,GAEvCwB,EAAS5B,KAAK4E,UAAUlC,EAAkBb,EAA6BiB,kBAAmBjF,EAASyG,KAvD/G,KAyDc5B,EAAkBb,EAA6BwB,iBAzD7D,OA0Da,kCA1Db,QA6Da,+CA7Db,QAgEa,oEAhEb,QAmEa,iDAnEb,QAsEa,qCAtEb,QAyEa,yBAzEb,QAoFa,gCApFb,gCA2DUnD,EAAYS,OAAOY,SAASsD,eAAiBjD,EA3DvD,oCA8DU1B,EAAYS,OAAOS,QAAQA,QAAUQ,EA9D/C,oCAiEU1B,EAAYS,OAAOe,WAAWA,WAAaE,EAjErD,oCAoEU1B,EAAYS,OAAOY,SAASuD,uBAAyBlD,EApE/D,oCAuEU1B,EAAYS,OAAOc,kBAAkBA,kBAAoBG,EAvEnE,oCA0EU1B,EAAYS,OAAOa,iBAAiBA,iBAAmBxB,KAAK+E,oBAC1DrC,EAAkBb,EAA6BmD,kBAC/CnH,EAASyG,KACTW,UAAU,GACZ/E,EAAYS,OAAOc,kBAAkBA,kBAAoBzB,KAAKkF,qBAC5DxC,EAAkBb,EAA6BsD,mBAC/CtH,EAASyG,KACTW,UAAU,GAjFtB,oCAqFU/E,EAAYS,OAAOa,iBAAiBA,iBAAmBxB,KAAK+E,oBAC1DrC,EAAkBb,EAA6BmD,kBAC/CnH,EAASyG,KAEXpE,EAAYS,OAAOc,kBAAkBA,kBAAoBzB,KAAKkF,qBAC5DxC,EAAkBb,EAA6BsD,mBAC/CtH,EAASyG,MAGLc,EAAUxD,EAAOyD,SACrBnF,EAAYS,OAAOc,kBAAkBA,kBAAkBP,IAAIhB,EAAYS,OAAOa,iBAAiBA,oBAEpF8D,WACXpF,EAAYS,OAAOa,iBAAiBkC,gBAAkB0B,GAlGlE,6BAuGM,OAvGN,UAuGYlF,EAvGZ,+XA4GI,MAAO,CACLkB,QAAS,CAAEA,QAASC,YAAO,CAAE7B,SAAUQ,KAAKR,YAC5C8B,cAAe,GACfC,SAAU,CACRsD,eAAgBxD,YAAO,CAAE7B,SAAUQ,KAAKR,WACxCsF,uBAAwBzD,YAAO,CAAE7B,SAAUQ,KAAKR,YAElDgC,iBAAkB,CAChBA,iBAAkBH,YAAO,CAAE7B,SAAUQ,KAAKR,WAC1CkE,gBAAiBrC,YAAO,CAAE7B,SAAUQ,KAAKR,YAE3CiC,kBAAmB,CACjBA,kBAAmBJ,YAAO,CAAE7B,SAAUQ,KAAKR,YAE7CkC,WAAY,CAAEA,WAAYL,YAAO,CAAE7B,SAAUQ,KAAKR,eA1HxD,gCA8HoB+F,EAAmB/F,GACnC,IAAMuD,EAAkBwC,EAAUtC,QAAUsC,EAAUvC,QAAQ,KAAO,GAC/DE,EAAYI,KAAKC,IAAIJ,SAASoC,EAAUnC,QAAQ,KAAM,IAAIA,QAAQ,MAAO,IAAK,KACpF,OAAO/B,YAAO,CACZO,OAAQsB,EACRM,UAAWT,EACXvD,eApIN,2CAwI+BgG,EAA8BhG,GACzD,IAAMiG,EAA6BD,EAAqBvC,QAAUuC,EAAqBxC,QAAQ,KAAO,GAChG0C,EAAuBpC,KAAKC,IAAIJ,SAASqC,EAAqBpC,QAAQ,KAAM,IAAIA,QAAQ,MAAO,IAAK,KAC1G,OAAO/B,YAAO,CACZO,OAAQ8D,EACRlC,UAAWiC,EACXjG,eA9IN,0CAkJ8BgG,EAA8BhG,GACxD,IAAMiG,EAA6BD,EAAqBvC,QAAUuC,EAAqBxC,QAAQ,KAAO,GAChG0C,EAAuBpC,KAAKC,IAAIJ,SAASqC,EAAqBpC,QAAQ,KAAM,IAAIA,QAAQ,MAAO,IAAK,KAC1G,OAAO/B,YAAO,CACZO,OAAQ8D,EACRlC,UAAWiC,EACXjG,gBAxJN,2CAGoCmE,GAChC,OACEA,EAAagC,SAAStB,EAAcR,4BAA8BF,EAAaG,SAASO,EAAcN,sBAL5G,GAAmCxE,GEV5B,SAASqD,EAAyBxC,GACvC,MAAO,CACLA,iBACAO,OAAQ,CACNS,QAAS,GACTE,cAAe,GACfC,SAAU,GACVC,iBAAkB,GAClBC,kBAAmB,GACnBC,WAAY,KFCL2C,EACY5E,SAAW3B,EAAuB8H,MAD9CvB,EASaR,0BAA4B,aATzCQ,EAUaN,iBAAmBnG,EAAUqG,KAV1CI,EAWaE,oBAAsB,CAC5C1C,EAA6Bc,KAC7Bd,EAA6BgE,UAC7BhE,EAA6BwB,gBAC7BxB,EAA6BiB,iBAC7BjB,EAA6BsD,kBAC7BtD,EAA6BmD,kB,SCnC5BZ,K,8BAAAA,E,YAAAA,E,kBAAAA,E,oBAAAA,E,kBAAAA,E,qBAAAA,M,KAgCE,IAAM0B,EAAb,2MAkBkBrG,SAAWqG,EAAerG,SAlB5C,EAmBSD,SAAW3B,EAASkE,IAnB7B,2EAqBqBlD,GACjB,IAAMmD,EAAapD,EAA6BC,GAE1Cc,EAAwBV,IAAKgD,MAAMC,cAAcF,EAAY,CACjEG,OAAQ2D,EAAevB,oBACvBlC,KAAK,EACLC,WAAW,EACXC,OAAQ,EACRC,MAAO,IAETxC,KAAKL,eAAiBA,IA/B1B,0KAqCoCK,KAAKL,eArCzC,kEAqCe+C,EArCf,QAsCYtC,EAAiBL,IAAO2C,EAAkB0B,EAA8BzB,MAAO,uBAC/EzC,EAAc0C,EAAyBxC,GAEvCZ,EAAWkD,EAAkB0B,EAA8BvG,UAC3D0H,EAAYQ,WAAWrD,EAAkB0B,EAA8B4B,WAAWC,WAElFrE,EAAS5B,KAAK4E,UAAUW,EAAW/F,GA5C/C,KA8CckD,EAAkB0B,EAA8B8B,SA9C9D,OA+Ca,yBA/Cb,QAkDa,mBAlDb,QAqDa,4BArDb,QAwDa,kBAxDb,gCAgDUhG,EAAYS,OAAOW,cAAc6E,gBAAkBvE,EAhD7D,oCAmDU1B,EAAYS,OAAOW,cAAc8E,iBAAmBxE,EAnD9D,oCAsDU1B,EAAYS,OAAOS,QAAQA,QAAUQ,EAtD/C,oCAyDU1B,EAAYS,OAAOY,SAAS8E,wBAA0BzE,EAzDhE,6BA6EM,OAhBIc,EAAkB0B,EAA8B8B,SAASI,cAActD,QAAQ,oBAAsB,EACvG9C,EAAYS,OAAOa,iBAAiBA,iBAAmBI,EAC9Cc,EAAkB0B,EAA8B8B,SAAStC,WAAW,wBAC7E1D,EAAYS,OAAOY,SAASuD,uBAAyBlD,EAC5Cc,EAAkB0B,EAA8B8B,SAAStC,WAAW,2BAC7E1D,EAAYS,OAAOa,iBAAiBkC,gBAAkB9B,EAC7Cc,EAAkB0B,EAA8B8B,SAAStC,WAAW,0CAC7E1D,EAAYS,OAAOS,QAAQmF,yBAA2B3E,EAC7Cc,EAAkB0B,EAA8B8B,SAAStC,WAAW,0CAC7E1D,EAAYS,OAAOe,WAAW8E,yBAA2B5E,EAEzDc,EAAkB0B,EAA8B8B,SAAStC,WAAW,qDAxE5E,UA6EY1D,EA7EZ,+XAkFI,MAAO,CACLkB,QAAS,CACPA,QAASC,YAAO,CAAE7B,SAAUQ,KAAKR,WACjC+G,yBAA0BlF,YAAO,CAAE7B,SAAUQ,KAAKR,YAEpD8B,cAAe,CACb8E,iBAAkB/E,YAAO,CAAE7B,SAAUQ,KAAKR,WAC1C2G,gBAAiB9E,YAAO,CAAE7B,SAAUQ,KAAKR,YAE3C+B,SAAU,CACR8E,wBAAyBhF,YAAO,CAAE7B,SAAUQ,KAAKR,WACjDsF,uBAAwBzD,YAAO,CAAE7B,SAAUQ,KAAKR,YAElDgC,iBAAkB,CAChBA,iBAAkBH,YAAO,CAAE7B,SAAUQ,KAAKR,WAC1CkE,gBAAiBrC,YAAO,CAAE7B,SAAUQ,KAAKR,YAE3CiC,kBAAmB,GACnBC,WAAY,CACVA,WAAYL,YAAO,CAAE7B,SAAUQ,KAAKR,WACpCgH,yBAA0BnF,YAAO,CAAE7B,SAAUQ,KAAKR,eAtG1D,gCA2GoB+F,EAAmB/F,GACnC,IAAIuD,EAAkB,EAClBwC,EAAUvC,QAAQ,MAAQ,IAC5BD,EAAkBwC,EAAUtC,QAAUsC,EAAUvC,QAAQ,KAAO,IAEjE,IAAME,EAAYI,KAAKC,IAAIJ,SAASoC,EAAUnC,QAAQ,MAAO,IAAK,KAClE,OAAO/B,YAAO,CACZO,OAAQsB,EACRM,UAAWT,EACXvD,gBApHN,2CAEoCmE,GAChC,OACEA,EAAagC,SAASG,EAAejC,4BAA8BF,EAAaG,SAASgC,EAAe/B,sBAJ9G,GAAoCxE,GAAvBuG,EACYrG,SAAW3B,EAAuB2I,OAD9CX,EAOajC,0BAA4B,oBAPzCiC,EAQa/B,iBAAmBnG,EAAUqG,KAR1C6B,EASavB,oBAAsB,CAC5CH,EAA8BF,cAC9BE,EAA8BzB,KAC9ByB,EAA8B8B,QAC9B9B,EAA8B4B,SAC9B5B,EAA8BsC,QAC9BtC,EAA8BvG,U,gBEbnB8I,E,sLArCQC,EAAYC,GAC/B7G,KAAK8G,MAAMC,kBAAkBH,EAAMI,OAAOrG,OAAQkG,K,qCAG9BD,GACpBA,EAAMK,kBACNL,EAAMM,iBACNN,EAAMO,aAAaC,WAAa,S,uCAGVR,GACtBA,EAAMK,kBACNL,EAAMM,iBAEN,IAAMG,EAAQT,EAAMO,aAAaE,MAEjCrH,KAAKsH,cAAgBtH,KAAKsH,cAAcC,KAAKvH,MANX,2BAOlC,YAAmBqH,EAAnB,+CAA0B,CACxBtJ,EADwB,QACDiC,KAAKsH,gBARI,qF,+BAYnB,IAAD,OACd,OACE,yBACEE,GAAG,YACHC,WAAY,SAAAhJ,GACV,EAAKiJ,eAAejJ,IAEtBkJ,OAAQ,SAAAlJ,GAAC,OAAI,EAAKmJ,iBAAiBnJ,KALrC,2C,GAzB8BoJ,IAAMC,W,gCC2C3BC,EA9CkB,SAACjB,GAChC,IAAM3F,EAAS2F,EAAMkB,aAAarG,oBAC5BsG,EAAkB9G,EAAOG,cAAc6E,gBAAgBjF,IAAIC,EAAOG,cAAc8E,kBACtF,OACE,6BACE,2DACA,iEAEGjF,EAAOK,iBAAiBA,iBAAiB0G,YAE5C,0EAEG/G,EAAOK,iBAAiBkC,gBAAgBwE,YAE3C,qEAEG/G,EAAOI,SAASuD,uBAAuB5D,IAAIC,EAAOI,SAAS8E,yBAAyB6B,YAEvF,+CAEGD,EAAgBC,YAEnB,qEAEG/G,EAAOC,QAAQA,QAASF,IAAI+G,GAAiBC,YAEhD,wFAEG/G,EAAOC,QAAQmF,yBAAyB2B,YAE3C,wFAEG/G,EAAOO,WAAW8E,yBAAyB0B,YAE9C,mFAEG/G,EAAOI,SAASuD,uBAAuBoD,YAE1C,mFAEG/G,EAAOI,SAAS8E,wBAAwB6B,cCzBlCC,EAfiB,SAACrB,GAC/B,IAAM3F,EAAS2F,EAAMkB,aAAarG,oBAElC,OACE,6BACE,6DACA,gEAA6BR,EAAOC,QAAQA,QAAQ8G,YACpD,wEAA6B/G,EAAOO,WAAWA,WAAWwG,YAC1D,8DAC0B/G,EAAOK,iBAAiBA,iBAAiBN,IAAIC,EAAOK,iBAAiBkC,iBAAiBwE,cCsBvGE,EA/BiB,SAACtB,GAC/B,IAAM3F,EAAS2F,EAAMkB,aAAarG,oBAClC,OACE,6BACE,0DACA,+CAEGR,EAAOK,iBAAiBA,iBACtBN,IAAIC,EAAOK,iBAAiBkC,iBAC5B2B,SAASlE,EAAOI,SAASsD,gBACzBQ,SAASlE,EAAOI,SAASuD,wBACzBoD,YAGL,yDAEG/G,EAAOI,SAASsD,eAAe3D,IAAIC,EAAOI,SAASuD,wBAAwBoD,YAG9E,mDAEG/G,EAAOK,iBAAiBA,iBAAiB0G,YAE5C,qCAEG/G,EAAOK,iBAAiBkC,gBAAgBwE,cCKlCG,EA9Ba,SAACvB,GAC3B,IAAMjH,EAAkBiH,EAAMkB,aAAaM,qBAC3C,OACE,6BACE,yDACA,qCAEGzI,EAAgBuB,QAAQ8G,YAE3B,6CAEGrI,EAAgB6B,WAAWwG,YAE9B,sDAEGrI,EAAgB4B,kBAAmByG,YAEtC,mCAEGrI,EAAgB2B,iBAAkB0G,YAErC,yDAEGrI,EAAgB0B,SAAU2G,YAE7B,mEAA4BrI,EAAgByB,cAAe4G,WAA3D,OCGSK,EApBY,SAACzB,GAC1B,IAAI0B,EAUJ,OARI1B,EAAMkB,wBAAwBlC,EAChC0C,EAAyB,kBAAC,EAAD,CAA0BR,aAAclB,EAAMkB,eAC9DlB,EAAMkB,wBAAwBlG,EACvC0G,EAAyB,kBAAC,EAAD,CAAyBR,aAAclB,EAAMkB,eAC7DlB,EAAMkB,wBAAwB3D,IACvCmE,EAAyB,kBAAC,EAAD,CAAyBR,aAAclB,EAAMkB,gBAItE,6BACE,kBAAC,EAAD,CAAqBA,aAAclB,EAAMkB,eACzC,6BACCQ,EACD,+BCyDSC,E,iLArEX,OACE,6BACE,+BACE,+BACE,4BAAKzI,KAAK0I,sBAEZ,+BAAQ1I,KAAK2I,uB,wCAOnB,OAAI3I,KAAK8G,MAAMkB,aAAatI,eAAeuD,OAAS,EAC3CjD,KAAK8G,MAAMkB,aAAatI,eAAekJ,IAC5C,SACElI,EAOAmI,GAUA,IARA,IAAMC,EAAc,CAClB1H,aAAS2H,EACTrH,gBAAYqH,EACZxH,cAAUwH,EACVzH,mBAAeyH,EACfvH,sBAAkBuH,GAGpB,MAAuClI,OAAOC,QAAQJ,EAAMC,QAA5D,eACE,IADoE,IAAD,0BAAzDI,EAAyD,KAAxCC,EAAwC,KACnE,MAAyBH,OAAOC,QAAuBE,GAAvD,eAA+D,CAAC,IAAD,OAAjDL,EAAiD,oBACzDmI,EAAY/H,GACd+H,EAAY/H,GAAmB+H,EAAY/H,GAAiBG,IAAIP,GAEhEmI,EAAY/H,GAAmBJ,EAKrC,OACE,wBAAIM,IAAK4H,GACP,4BAAKnI,EAAMA,MAAMsI,OAAO,aACxB,4BAAKF,EAAY1H,QAAU0H,EAAY1H,QAAQ8G,WAAa,IAC5D,4BAAKY,EAAYpH,WAAaoH,EAAYpH,WAAWwG,WAAa,IAClE,4BAAKY,EAAYtH,iBAAmBsH,EAAYtH,iBAAiB0G,WAAa,IAC9E,4BAAKY,EAAYvH,SAAWuH,EAAYvH,SAAS2G,WAAa,IAC9D,4BAAKY,EAAYxH,cAAgBwH,EAAYxH,cAAc4G,WAAa,OAMzE,wBAAIjH,IAAK,M,0CAKlB,MAAO,CAAC,QAAS,SAAU,iBAAU,8BAAiB,6BAA2B,uCAA0B2H,IACzG,SAAC3H,EAAK4H,GACJ,OAAO,wBAAI5H,IAAK4H,GAAQ5H,S,GAjEN4G,IAAMC,WCMjBmB,EATM,SAACnC,GACpB,OACE,6BACE,kBAAC,EAAD,CAAoBkB,aAAclB,EAAMkB,eACxC,kBAAC,EAAD,CAAaA,aAAclB,EAAMkB,iBCMvC,SAASkB,EAASpC,GAAwB,IAChCqC,EAAqCrC,EAArCqC,SAAUnI,EAA2B8F,EAA3B9F,MAAO6H,EAAoB/B,EAApB+B,MAAUO,EADI,YACMtC,EADN,8BAGvC,OACE,kBAACuC,EAAA,EAAD,eACEC,UAAU,MACVC,KAAK,WACLC,OAAQxI,IAAU6H,EAClBrB,GAAE,0BAAqBqB,GACvBY,kBAAA,qBAA+BZ,IAC3BO,GAEJ,kBAACM,EAAA,EAAD,CAAKC,EAAG,GAAIR,IAKlB,SAASS,EAAUf,GACjB,MAAO,CACLrB,GAAG,cAAD,OAAgBqB,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAgDegB,EAhDc,SAAC/C,GAAoC,IAAD,EACrBgD,mBAAS,GADY,mBACxDC,EADwD,KACzCC,EADyC,KAMzDC,EAAqB,GAE3BnD,EAAMoD,mBAAmBC,QAAQ,SAAC1K,GAChCwK,EAAcxK,EAASA,UAAY,kBAAC,EAAD,CAAcuI,aAAcvI,MAEjE,IAAM2K,EAAqBvJ,OAAOwJ,KAAKJ,GAEvC,OACE,6BACE,kBAACK,EAAA,EAAD,CAAOC,QAAQ,GACb,kBAACC,EAAA,EAAD,CAAMxJ,MAAO+I,EAAeU,SAdd,SAAC7D,EAA8B8D,GACjDV,EAAiBU,IAasCC,aAAW,sBAAsBC,QAAQ,aAC1F,kBAACC,EAAA,EAAD,eAAKC,MAAM,aAAgBlB,EAAU,GAArC,CAAyCmB,UAAU,KACnD,kBAACF,EAAA,EAAD,eAAKC,MAAM,kBAAqBlB,EAAU,GAA1C,CAA8CmB,UAAWX,EAAmBzE,SAAS7H,EAAuB8H,UAC5G,kBAACiF,EAAA,EAAD,eACEC,MAAM,oBACFlB,EAAU,GAFhB,CAGEmB,UAAWX,EAAmBzE,SAAS7H,EAAuB2I,WAEhE,kBAACoE,EAAA,EAAD,eAAKC,MAAM,kBAAqBlB,EAAU,GAA1C,CAA8CmB,UAAWX,EAAmBzE,SAAS7H,EAAuBkG,YAIhH,yBAAKgH,MAAO,CAAEC,WAAY,QACxB,kBAACX,EAAA,EAAD,CAAOC,QAAQ,GACb,kBAACrB,EAAD,CAAUlI,MAAO+I,EAAelB,MAAO,GAAvC,2FAGA,kBAACK,EAAD,CAAUlI,MAAO+I,EAAelB,MAAO,GACpCoB,EAAcnM,EAAuB8H,QAExC,kBAACsD,EAAD,CAAUlI,MAAO+I,EAAelB,MAAO,GACpCoB,EAAcnM,EAAuB2I,SAExC,kBAACyC,EAAD,CAAUlI,MAAO+I,EAAelB,MAAO,GACpCoB,EAAcnM,EAAuBkG,YCjDnCkH,I,4LA5BQtE,EAAYC,GAC/B7G,KAAK8G,MAAMC,kBAAkBH,EAAMI,OAAOrG,OAAQkG,K,wCAG3BD,GACvB,IAAMS,EAAQT,EAAMI,OAAOK,MAE3BrH,KAAKsH,cAAgBtH,KAAKsH,cAAcC,KAAKvH,MAHV,2BAInC,YAAmBqH,EAAnB,+CAA0B,CACxBtJ,EADwB,QACDiC,KAAKsH,gBALK,qF,+BASpB,IAAD,OACd,OACE,yBAAKE,GAAG,eACN,2BACErI,KAAK,OACLgM,UAAU,EACVV,SAAU,SAAAhM,GACR,EAAK2M,kBAAkB3M,W,GArBJoJ,IAAMC,YCsKtBuD,G,2MAnJNC,MAAQ,CAAEpB,mBAAoB,I,qFAERrL,EAAsBgI,GACjD,IACE,IACImB,EAEJ,OX1BC,SAAwBnB,GAC7B,GAAIf,EAAeyF,oBAAoB1E,GACrC,OAAOf,EAAerG,SACjB,GAAIqC,EAAcyJ,oBAAoB1E,GAC3C,OAAO/E,EAAcrC,SAChB,GAAI4E,EAAckH,oBAAoB1E,GAC3C,OAAOxC,EAAc5E,SAErB,MAAM,IAAIkF,MAAM,gBWeO6G,CAAe3E,IAIlC,KAAK/I,EAAuB2I,OAC1BuB,EAAe,IAAIlC,EACnB,MACF,KAAKhI,EAAuBkG,MAC1BgE,EAAe,IAAIlG,EACnB,MACF,KAAKhE,EAAuB8H,MAC1BoC,EAAe,IAAI3D,EACnB,MACF,QACE,MAAMM,MAAM,oBAGhBqD,EAAayD,YAAY5M,GACzBmJ,EAAa0D,sBAEb1L,KAAK2L,SAAS,SAAAC,GAAS,MAAK,CAC1B1B,mBAAmB,GAAD,mBAAM0B,EAAU1B,oBAAhB,CAAoClC,OAExD,MAAOvJ,GACPH,QAAQC,IAAIE,M,+BAIC,IAAD,OACd,OACE,6BACE,6BACE,uBACEuI,OAAO,SACP6E,IAAI,sBACJC,KAAK,uCACLC,UAAU,gBACVpB,aAAW,yBAEX,yBACEqB,MAAO,GACPC,OAAQ,GACRC,QAAQ,cACRlB,MAAO,CAAEmB,KAAM,UAAWC,MAAO,OAAQC,SAAU,WAAYC,IAAK,EAAGC,OAAQ,EAAGC,MAAO,EAAGC,OAAQ,GACpGC,cAAY,QAEZ,0BAAMC,EAAE,sDACR,0BACEA,EAAE,2LACFR,KAAK,eACLnB,MAAO,CAAE4B,gBAAiB,eAC1Bb,UAAU,aAEZ,0BACEY,EAAE,shBACFR,KAAK,eACLJ,UAAU,gBAIhB,2BACEc,wBAAyB,CACvBC,OACE,+UAKR,6BACE,kBAACC,EAAA,EAAD,CAAQV,SAAS,UACf,kBAACW,EAAA,EAAD,KACE,kBAAC3D,EAAA,EAAD,CAAYuB,QAAQ,MAApB,yCAKN,6BACE,2BACE,uJAEF,oGAEE,uBAAG5D,OAAO,SAAS6E,IAAI,sBAAsBC,KAAK,wCAAlD,cAFF,KAKI,6BALJ,uIAOE,uBAAG9E,OAAO,SAAS6E,IAAI,sBAAsBC,KAAK,oDAAlD,iDAPF,KAYA,2BACE,6LAEE,6BAFF,qEAOF,uIAEA,wBAAItE,GAAG,oBACL,mKACA,sZAKA,wcAQJ,yBAAKuE,UAAU,SACb,kBAACzB,EAAA,EAAD,CAAOC,QAAQ,GACb,kBAAC0C,EAAA,EAAD,CAAMC,WAAW,GACf,kBAACD,EAAA,EAAD,CAAME,MAAM,EAAMC,GAAI,GACpB,kBAAC,GAAD,CAAkBrG,kBAAmB,SAACsG,EAASxG,GAAV,OAAuB,EAAKyG,sBAAsBD,EAASxG,OAElG,kBAACoG,EAAA,EAAD,CAAME,MAAM,EAAMC,GAAI,GACpB,kBAAC,EAAD,CAAuBrG,kBAAmB,SAACsG,EAASxG,GAAV,OAAuB,EAAKyG,sBAAsBD,EAASxG,OAEvG,kBAACoG,EAAA,EAAD,CAAME,MAAM,EAAMC,GAAI,IACpB,kBAAC9C,EAAA,EAAD,CAAOC,QAAQ,EAAM/C,GAAG,mBAAxB,6EACuCxH,KAAKsL,MAAMpB,mBAAqBlK,KAAKsL,MAAMpB,mBAAmBjH,OAAS,SAOtH,yBAAK8I,UAAU,QAAQf,MAAO,CAAEC,WAAY,SAC1C,kBAAC,EAAD,CAAsBf,mBAAoBlK,KAAKsL,MAAMpB,2B,GA7I7CrC,IAAMC,WCpBxByF,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a1b10d90.chunk.js","sourcesContent":["export enum FileTypes {\n  XLSX = '.xlsx',\n  XLS = '.xls',\n  CSV = '.csv',\n  PDF = '.pdf'\n  // RAW_TEXT = 'raw_text'\n}\n\nexport enum Currency {\n  CZK = 'CZK',\n  EUR = 'EUR'\n}\n","import { Moment } from 'moment';\n\nimport {\n  IMintosDeposit,\n  IMintosExtraReceived,\n  IMintosFeesPaid,\n  IMintosInterestReceived,\n  IMintosWithdrawal,\n  MintosPlatform\n} from './MintosPlatform';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { IZonkyFeesPaid, IZonkyInterestReceived, ZonkyPlatform } from './ZonkyPlatform';\n\nexport type SupportedPlatform = MintosPlatform | TwinoPlatform | ZonkyPlatform;\n\nexport enum SupportedPlatformTypes {\n  MINTOS = 'mintos',\n  TWINO = 'twino',\n  ZONKY = 'zonky'\n}\n\nexport interface IPortfolioResult {\n  deposit: Dinero.Dinero;\n  withdrawal: Dinero.Dinero;\n  principalReceived: Dinero.Dinero;\n  interestReceived: Dinero.Dinero;\n  extraReceived: Dinero.Dinero;\n  feesPaid: Dinero.Dinero;\n}\n\nexport interface IGeneralDeposit {\n  deposit?: Dinero.Dinero;\n}\n\nexport interface IGeneralWithdrawal {\n  withdrawal?: Dinero.Dinero;\n}\n\nexport interface IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  deposit: Deposit;\n  withdrawal: Withdrawal;\n  principalReceived: {\n    principalReceived?: Dinero.Dinero;\n  };\n  interestReceived: InterestReceived;\n  extraReceived: ExtraReceived;\n  feesPaid: FeePaid;\n}\n\nexport interface IMonthlyResults<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  month: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport interface ITransaction<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  processingDate: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport type IDepositOptions = IGeneralDeposit | IMintosDeposit;\nexport type IExtraReceivedOptions = IMintosExtraReceived | {};\nexport type IFeePaidOptions = IMintosFeesPaid | IZonkyFeesPaid;\nexport type IInterestReceivedOptions = IMintosInterestReceived | IZonkyInterestReceived;\n\nexport type IWithdrawalOptions = IGeneralWithdrawal | IMintosWithdrawal;\n","import xlsx from 'xlsx';\n\nexport function loadSelectedFile(file: File, cb: (event: any, filename: string) => void) {\n  const reader = new FileReader();\n  reader.onerror = ex => {\n    // FIXME\n    console.log(ex);\n  };\n  reader.onload = (e: any) => {\n    cb(e, file.name);\n  };\n  reader.readAsArrayBuffer(file);\n}\n\nexport function getFirstWorkSheetFromRawFile(rawFile: ArrayBuffer): xlsx.WorkSheet {\n  const content = new Uint8Array(rawFile);\n  const workbook = xlsx.read(content, { type: 'array' });\n  const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n  return firstSheet;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum TwinoASFileColumnHeadersDefs {\n  Date = 'Processing Date',\n  TransactionId = 'Transaction ID',\n  TransactionType = 'Type',\n  PaymentType = 'Description',\n  LoanId = 'Loan Number',\n  ProcessingAmount = 'Amount, EUR'\n}\n\nexport interface ITwinoInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class TwinoPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.TWINO;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.startsWith(TwinoPlatform.platformFilenameSubstring) && fullFilename.endsWith(TwinoPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'account_statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly dataColumnHeader = [\n    TwinoASFileColumnHeadersDefs.Date,\n    TwinoASFileColumnHeadersDefs.TransactionId,\n    TwinoASFileColumnHeadersDefs.TransactionType,\n    TwinoASFileColumnHeadersDefs.PaymentType,\n    TwinoASFileColumnHeadersDefs.LoanId,\n    TwinoASFileColumnHeadersDefs.ProcessingAmount\n  ];\n\n  public readonly platform = TwinoPlatform.platform;\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: TwinoPlatform.dataColumnHeader,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 3\n    });\n    this.transactionLog = transactionLog.reverse();\n  }\n\n  protected *getTransaction(): IterableIterator<\n    ITransaction<{}, ITwinoInterestReceived, {}, IGeneralDeposit, IGeneralWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[TwinoASFileColumnHeadersDefs.Date], 'MM/DD/YY HH:mm');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const dataAmount = transactionRecord[TwinoASFileColumnHeadersDefs.ProcessingAmount];\n\n      let amountPrecision = 0;\n      if (dataAmount.indexOf('.') >= 0) {\n        amountPrecision = dataAmount.length - (dataAmount.indexOf('.') + 1);\n      }\n      const intAmount = parseInt(transactionRecord[TwinoASFileColumnHeadersDefs.ProcessingAmount].replace(/\\./g, ''), 10);\n\n      switch (transactionRecord[TwinoASFileColumnHeadersDefs.TransactionType]) {\n        case 'FUNDING':\n          if (intAmount > 0) {\n            transaction.result.deposit.deposit = Dinero({\n              amount: Math.abs(intAmount),\n              precision: amountPrecision,\n              currency: this.currency\n            });\n          } else if (intAmount < 0) {\n            transaction.result.withdrawal.withdrawal = Dinero({\n              amount: Math.abs(intAmount),\n              precision: amountPrecision,\n              currency: this.currency\n            });\n          }\n          break;\n      }\n\n      switch (transactionRecord[TwinoASFileColumnHeadersDefs.PaymentType]) {\n        case 'PENALTY':\n          transaction.result.interestReceived.penaltyReceived = Dinero({\n            amount: Math.abs(intAmount),\n            precision: amountPrecision,\n            currency: this.currency\n          });\n          break;\n        case 'INTEREST':\n          transaction.result.interestReceived.interestReceived = Dinero({\n            amount: intAmount,\n            precision: amountPrecision,\n            currency: this.currency\n          });\n          break;\n      }\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {\n        deposit: Dinero({ currency: this.currency })\n      },\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {},\n      withdrawal: {\n        withdrawal: Dinero({ currency: this.currency })\n      }\n    };\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\n\nimport { Currency } from '../../common/enums';\n\nimport { IBaseResult, IMonthlyResults, IPortfolioResult, ITransaction, SupportedPlatformTypes } from './models';\n\nexport abstract class Platform {\n  public abstract currency: Currency;\n  public abstract readonly platform: SupportedPlatformTypes;\n\n  public monthlyResults: Array<IMonthlyResults<any, any, any, any, any>> = [];\n\n  protected transactionLog: any[] = [];\n\n  private platformTotals?: IBaseResult<any, any, any, any, any>;\n  private portfolioTotals?: IPortfolioResult;\n\n  public processTransactions() {\n    let processingMonth = moment(0);\n\n    for (const transaction of this.getTransaction()) {\n      const dateTransaction = transaction.processingDate;\n\n      if (dateTransaction.isAfter(processingMonth, 'month')) {\n        const dateArray = dateTransaction.toArray();\n        const newMonthMoment = moment(`${dateArray[0]}-${dateArray[1] + 1}-01`, 'YYYY-MM-DD');\n\n        this.monthlyResults.unshift({\n          month: newMonthMoment,\n          result: this.getNewBaseResultFactory()\n        });\n        processingMonth = newMonthMoment;\n      }\n\n      for (const [transactionType, value] of Object.entries<any>(transaction.result)) {\n        for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore TODO\n          this.monthlyResults[0].result[transactionType][key] = this.monthlyResults[0].result[transactionType][key].add(result);\n        }\n      }\n    }\n  }\n\n  public getPlatformTotals() {\n    if (!this.platformTotals) {\n      const totals = this.getNewBaseResultFactory();\n      for (const month of this.monthlyResults) {\n        for (const [transactionType, value] of Object.entries<any>(month.result)) {\n          for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n            // @ts-ignore\n            totals[transactionType][key] = totals[transactionType][key].add(result);\n          }\n        }\n      }\n      this.platformTotals = totals;\n    }\n    return this.platformTotals;\n  }\n\n  public getPortfolioTotals() {\n    if (!this.portfolioTotals) {\n      const totals: IPortfolioResult = {\n        deposit: Dinero({ currency: this.currency }),\n        extraReceived: Dinero({ currency: this.currency }),\n        feesPaid: Dinero({ currency: this.currency }),\n        interestReceived: Dinero({ currency: this.currency }),\n        principalReceived: Dinero({ currency: this.currency }),\n        withdrawal: Dinero({ currency: this.currency })\n      };\n\n      const platformTotals = this.getPlatformTotals();\n\n      for (const [transactionType, value] of Object.entries(platformTotals)) {\n        for (const [, amount] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore\n          totals[transactionType] = totals[transactionType].add(amount);\n        }\n      }\n\n      this.portfolioTotals = totals;\n    }\n\n    return this.portfolioTotals;\n  }\n\n  protected abstract parseASFile(rawFile: ArrayBuffer): void;\n  protected abstract getTransaction(): IterableIterator<ITransaction<any, any, any, any, any>>;\n  protected abstract getNewBaseResultFactory(): IBaseResult<any, any, any, any, any>;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum ZonkyASFileColumnHeadersDefs {\n  Date = 'Datum',\n  Direction = 'Příjem / Výdaj',\n  TransactionType = 'Typ transakce',\n  ProcessingAmount = 'Částka',\n  InterestReceived = 'Jistina',\n  PrincipalReceived = 'Úrok'\n}\n\nexport interface IZonkyFeesPaid {\n  plaformFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\nexport interface IZonkyInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class ZonkyPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.ZONKY;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(ZonkyPlatform.platformFilenameSubstring) && fullFilename.endsWith(ZonkyPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'transakce-';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    ZonkyASFileColumnHeadersDefs.Date,\n    ZonkyASFileColumnHeadersDefs.Direction,\n    ZonkyASFileColumnHeadersDefs.TransactionType,\n    ZonkyASFileColumnHeadersDefs.ProcessingAmount,\n    ZonkyASFileColumnHeadersDefs.PrincipalReceived,\n    ZonkyASFileColumnHeadersDefs.InterestReceived\n  ];\n\n  public readonly platform = ZonkyPlatform.platform;\n  public currency = Currency.CZK;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: ZonkyPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 4\n    });\n\n    let headerNotFound = true;\n    for (let rowNumber = 0; rowNumber < 15; rowNumber++) {\n      if (transactionLog[rowNumber][ZonkyASFileColumnHeadersDefs.Date] === ZonkyASFileColumnHeadersDefs.Date) {\n        transactionLog.splice(0, rowNumber + 1);\n        headerNotFound = false;\n        break;\n      }\n    }\n    if (headerNotFound) {\n      throw Error('Data header not found');\n    }\n    this.transactionLog = transactionLog;\n  }\n\n  public *getTransaction(): IterableIterator<\n    ITransaction<{}, IZonkyInterestReceived, IZonkyFeesPaid, IGeneralDeposit, IGeneralWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[ZonkyASFileColumnHeadersDefs.Date], 'DD.MM.YYYY');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const amount = this.getAmount(transactionRecord[ZonkyASFileColumnHeadersDefs.ProcessingAmount], Currency.CZK);\n\n      switch (transactionRecord[ZonkyASFileColumnHeadersDefs.TransactionType]) {\n        case 'Poplatek za investování':\n          transaction.result.feesPaid.plaformFeePaid = amount;\n          break;\n        case 'Nabití vaší peněženky':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'Výběr z peněženky na váš účet':\n          transaction.result.withdrawal.withdrawal = amount;\n          break;\n        case 'Poplatek za prodej na sekundárním trhu':\n          transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n          break;\n        case 'Prodej na sekundárním trhu':\n          transaction.result.principalReceived.principalReceived = amount;\n          break;\n        case 'Vrácení platby':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          ).multiply(-1);\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          ).multiply(-1);\n          break;\n\n        case 'Splátka půjčky':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          );\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          );\n\n          const penalty = amount.subtract(\n            transaction.result.principalReceived.principalReceived.add(transaction.result.interestReceived.interestReceived)\n          );\n          if (!penalty.isZero()) {\n            transaction.result.interestReceived.penaltyReceived = penalty;\n          }\n\n          break;\n      }\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: { deposit: Dinero({ currency: this.currency }) },\n      extraReceived: {},\n      feesPaid: {\n        plaformFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {\n        principalReceived: Dinero({ currency: this.currency })\n      },\n      withdrawal: { withdrawal: Dinero({ currency: this.currency }) }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    const amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n\n  private getPrincipalReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n\n  private getInterestReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum MintosASFileColumnHeadersDefs {\n  TransactionId = 'TransactionId',\n  Date = 'Date',\n  Details = 'Details',\n  Turnover = 'Turnover',\n  Balance = 'Balance',\n  Currency = 'Currency'\n}\n\nexport interface IMintosDeposit extends IGeneralDeposit {\n  incomingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport interface IMintosExtraReceived {\n  referalReceived?: Dinero.Dinero;\n  cashbackReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosFeesPaid {\n  currencyExchangeFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\n\nexport interface IMintosInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosWithdrawal extends IGeneralWithdrawal {\n  outgoingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport class MintosPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.MINTOS;\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(MintosPlatform.platformFilenameSubstring) && fullFilename.endsWith(MintosPlatform.platformFileType)\n    );\n  }\n  private static readonly platformFilenameSubstring = 'account-statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    MintosASFileColumnHeadersDefs.TransactionId,\n    MintosASFileColumnHeadersDefs.Date,\n    MintosASFileColumnHeadersDefs.Details,\n    MintosASFileColumnHeadersDefs.Turnover,\n    MintosASFileColumnHeadersDefs.Balance,\n    MintosASFileColumnHeadersDefs.Currency\n  ];\n\n  public readonly platform = MintosPlatform.platform;\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: MintosPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 1\n    });\n    this.transactionLog = transactionLog;\n  }\n\n  protected *getTransaction(): IterableIterator<\n    ITransaction<IMintosExtraReceived, {}, IMintosFeesPaid, IMintosDeposit, IMintosWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[MintosASFileColumnHeadersDefs.Date], 'YYYY-MM-DD HH:mm:ss');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const currency = transactionRecord[MintosASFileColumnHeadersDefs.Currency];\n      const rawAmount = parseFloat(transactionRecord[MintosASFileColumnHeadersDefs.Turnover]).toString();\n\n      const amount = this.getAmount(rawAmount, currency);\n\n      switch (transactionRecord[MintosASFileColumnHeadersDefs.Details]) {\n        case 'Refer a friend bonus':\n          transaction.result.extraReceived.referalReceived = amount;\n          break;\n        case 'Cashback bonus':\n          transaction.result.extraReceived.cashbackReceived = amount;\n          break;\n        case 'Incoming client payment':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'FX commission':\n          transaction.result.feesPaid.currencyExchangeFeePaid = amount;\n          break;\n      }\n\n      if (transactionRecord[MintosASFileColumnHeadersDefs.Details].toLowerCase().indexOf('interest income') >= 0) {\n        transaction.result.interestReceived.interestReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Secondary market fee')) {\n        transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Late payment fee income')) {\n        transaction.result.interestReceived.penaltyReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Incoming currency exchange transaction')) {\n        transaction.result.deposit.incomingCurrencyExchange = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Outgoing currency exchange transaction')) {\n        transaction.result.withdrawal.outgoingCurrencyExchange = amount;\n      } else if (\n        transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Discount/premium for secondary market transaction')\n      ) {\n        // TODO\n      }\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {\n        deposit: Dinero({ currency: this.currency }),\n        incomingCurrencyExchange: Dinero({ currency: this.currency })\n      },\n      extraReceived: {\n        cashbackReceived: Dinero({ currency: this.currency }),\n        referalReceived: Dinero({ currency: this.currency })\n      },\n      feesPaid: {\n        currencyExchangeFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {},\n      withdrawal: {\n        withdrawal: Dinero({ currency: this.currency }),\n        outgoingCurrencyExchange: Dinero({ currency: this.currency })\n      }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    let amountPrecision = 0;\n    if (rawAmount.indexOf('.') >= 0) {\n      amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    }\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n}\n","import { Moment } from 'moment';\n\nimport { MintosPlatform } from './MintosPlatform';\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport function detectPlatform(filename: string): SupportedPlatformTypes {\n  if (MintosPlatform.isPlatformFileValid(filename)) {\n    return MintosPlatform.platform;\n  } else if (TwinoPlatform.isPlatformFileValid(filename)) {\n    return TwinoPlatform.platform;\n  } else if (ZonkyPlatform.isPlatformFileValid(filename)) {\n    return ZonkyPlatform.platform;\n  } else {\n    throw new Error('unknown file');\n  }\n}\n\nexport function getNewTransactionFactory(processingDate: Moment): ITransaction<any, any, any, any, any> {\n  return {\n    processingDate,\n    result: {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    }\n  };\n}\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\nimport './DragAndDropFilesInput.css';\n\nclass DragAndDropFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public handleDragOver(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public handleFileSelect(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = event.dataTransfer.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        id=\"drop_zone\"\n        onDragOver={e => {\n          this.handleDragOver(e);\n        }}\n        onDrop={e => this.handleFileSelect(e)}\n      >\n        Přetáhněte soubory sem\n      </div>\n    );\n  }\n}\n\nexport default DragAndDropFilesInput;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst MintosSpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  const campaignRewards = totals.extraReceived.referalReceived.add(totals.extraReceived.cashbackReceived);\n  return (\n    <div>\n      <h3>Mintos - statistiky na webu</h3>\n      <p>\n        Interest - úvodní stránka:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </p>\n      <p>\n        Late Payment Fees - úvodní stránka:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </p>\n      <p>\n        Service fees - úvodní stránka:\n        {totals.feesPaid.secondaryMarketFeePaid.add(totals.feesPaid.currencyExchangeFeePaid).toFormat()}\n      </p>\n      <p>\n        Campaign Rewards:\n        {campaignRewards.toFormat()}\n      </p>\n      <p>\n        Deposit - stránka Account statement:\n        {totals.deposit.deposit!.add(campaignRewards).toFormat()}\n      </p>\n      <p>\n        Incoming Currency Exchange - stránka Account statement:\n        {totals.deposit.incomingCurrencyExchange.toFormat()}\n      </p>\n      <p>\n        Outgoing Currency Exchange - stránka Account statement:\n        {totals.withdrawal.outgoingCurrencyExchange.toFormat()}\n      </p>\n      <p>\n        Secondary Market Fees - stránka Account statement:\n        {totals.feesPaid.secondaryMarketFeePaid.toFormat()}\n      </p>\n      <p>\n        Currency Exchange Fee - stránka Account statement:\n        {totals.feesPaid.currencyExchangeFeePaid.toFormat()}\n      </p>\n    </div>\n  );\n};\n\nexport default MintosSpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst TwinoSpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n\n  return (\n    <div>\n      <h3>Twino.eu - statistiky na webu</h3>\n      <p>Vklady - úvodní stránka: {totals.deposit.deposit.toFormat()}</p>\n      <p>Výběry - úvodní stránka: {totals.withdrawal.withdrawal.toFormat()}</p>\n      <p>\n        Zisk - úvodní stránka: {totals.interestReceived.interestReceived.add(totals.interestReceived.penaltyReceived).toFormat()}\n      </p>\n    </div>\n  );\n};\n\nexport default TwinoSpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst ZonkySpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  return (\n    <div>\n      <h3>Zonky - statistiky na webu</h3>\n      <p>\n        Vyděláno:\n        {totals.interestReceived.interestReceived\n          .add(totals.interestReceived.penaltyReceived)\n          .subtract(totals.feesPaid.plaformFeePaid)\n          .subtract(totals.feesPaid.secondaryMarketFeePaid)\n          .toFormat()}\n      </p>\n\n      <p>\n        Zaplaceno na poplatcích:\n        {totals.feesPaid.plaformFeePaid.add(totals.feesPaid.secondaryMarketFeePaid).toFormat()}\n      </p>\n\n      <p>\n        Úrok zaplacený:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </p>\n      <p>\n        Pokuty:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </p>\n    </div>\n  );\n};\n\nexport default ZonkySpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from './PlatformView';\n\nconst PortfolioHeaderView = (props: PlatformDataProps) => {\n  const portfolioTotals = props.platformData.getPortfolioTotals();\n  return (\n    <div>\n      <h3>Sjednocené součty</h3>\n      <p>\n        Vklady:\n        {portfolioTotals.deposit.toFormat()}\n      </p>\n      <p>\n        Výběry:\n        {portfolioTotals.withdrawal.toFormat()}\n      </p>\n      <p>\n        Přijaté jistiny:\n        {portfolioTotals.principalReceived!.toFormat()}\n      </p>\n      <p>\n        Zisk:\n        {portfolioTotals.interestReceived!.toFormat()}\n      </p>\n      <p>\n        Zaplaceno na poplatcích:\n        {portfolioTotals.feesPaid!.toFormat()}\n      </p>\n      <p>Mimo investiční odměny: {portfolioTotals.extraReceived!.toFormat()} </p>\n    </div>\n  );\n};\n\nexport default PortfolioHeaderView;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport MintosSpecificHeaderView from './platformSpecific/MintosSpecificHeaderView';\nimport TwinoSpecificHeaderView from './platformSpecific/TwinoSpecificHeaderView';\nimport ZonkySpecificHeaderView from './platformSpecific/ZonkySpecificHeaderView';\nimport { PlatformDataProps } from './PlatformView';\nimport PortfolioHeaderView from './PortfolioHeaderView';\n\nconst PlatformHeaderView = (props: PlatformDataProps) => {\n  let platformSpecificHeader;\n\n  if (props.platformData instanceof MintosPlatform) {\n    platformSpecificHeader = <MintosSpecificHeaderView platformData={props.platformData} />;\n  } else if (props.platformData instanceof TwinoPlatform) {\n    platformSpecificHeader = <TwinoSpecificHeaderView platformData={props.platformData} />;\n  } else if (props.platformData instanceof ZonkyPlatform) {\n    platformSpecificHeader = <ZonkySpecificHeaderView platformData={props.platformData} />;\n  }\n\n  return (\n    <div>\n      <PortfolioHeaderView platformData={props.platformData} />\n      <hr />\n      {platformSpecificHeader}\n      <hr />\n    </div>\n  );\n};\nexport default PlatformHeaderView;\n","import Dinero from 'dinero.js';\nimport React from 'react';\n\nimport {\n  IDepositOptions,\n  IExtraReceivedOptions,\n  IFeePaidOptions,\n  IInterestReceivedOptions,\n  IMonthlyResults,\n  IWithdrawalOptions\n} from '../core/platforms/models';\n\nimport { PlatformDataProps } from './PlatformView';\n\nclass ResultTable extends React.Component<PlatformDataProps> {\n  public render() {\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>{this.renderTableHeader()}</tr>\n          </thead>\n          <tbody>{this.renderTableData()}</tbody>\n        </table>\n      </div>\n    );\n  }\n\n  private renderTableData() {\n    if (this.props.platformData.monthlyResults.length > 0) {\n      return this.props.platformData.monthlyResults.map(\n        (\n          month: IMonthlyResults<\n            IExtraReceivedOptions,\n            IInterestReceivedOptions,\n            IFeePaidOptions,\n            IDepositOptions,\n            IWithdrawalOptions\n          >,\n          index: any\n        ) => {\n          const monthResult = {\n            deposit: undefined,\n            withdrawal: undefined,\n            feesPaid: undefined,\n            extraReceived: undefined,\n            interestReceived: undefined\n          } as any;\n\n          for (const [transactionType, value] of Object.entries(month.result)) {\n            for (const [, result] of Object.entries<Dinero.Dinero>(value)) {\n              if (monthResult[transactionType]) {\n                monthResult[transactionType] = monthResult[transactionType].add(result);\n              } else {\n                monthResult[transactionType] = result;\n              }\n            }\n          }\n\n          return (\n            <tr key={index}>\n              <td>{month.month.format('MMM YYYY')}</td>\n              <td>{monthResult.deposit ? monthResult.deposit.toFormat() : ''}</td>\n              <td>{monthResult.withdrawal ? monthResult.withdrawal.toFormat() : ''}</td>\n              <td>{monthResult.interestReceived ? monthResult.interestReceived.toFormat() : ''}</td>\n              <td>{monthResult.feesPaid ? monthResult.feesPaid.toFormat() : ''}</td>\n              <td>{monthResult.extraReceived ? monthResult.extraReceived.toFormat() : ''}</td>\n            </tr>\n          );\n        }\n      );\n    } else {\n      return <tr key={0} />;\n    }\n  }\n\n  private renderTableHeader() {\n    return ['Datum', 'Vklady', 'Výběry', 'Příjaté úroky', 'Zaplaceno na poplatcích', 'Mimo investiční odměny'].map(\n      (key, index) => {\n        return <th key={index}>{key}</th>;\n      }\n    );\n  }\n}\n\nexport default ResultTable;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformHeaderView from './PlatformHeaderView';\nimport ResultTable from './ResultTable';\n\nexport type PlatformDataProps = {\n  platformData: SupportedPlatform;\n};\n\nconst PlatformView = (props: PlatformDataProps) => {\n  return (\n    <div>\n      <PlatformHeaderView platformData={props.platformData} />\n      <ResultTable platformData={props.platformData} />\n    </div>\n  );\n};\n\nexport default PlatformView;\n","import Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useState } from 'react';\n\nimport { SupportedPlatform, SupportedPlatformTypes } from '../core/platforms/models';\n\nimport PlatformView from './PlatformView';\n\nexport type PortfolioPlatformsProps = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\ninterface ITabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: ITabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      <Box p={4}>{children}</Box>\n    </Typography>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nconst PlatformsTabMenuView = (props: PortfolioPlatformsProps) => {\n  const [tabIndexValue, setTabIndexValue] = useState(0);\n  const onTabChange = (event: React.ChangeEvent<{}>, newTabIndexValue: number) => {\n    setTabIndexValue(newTabIndexValue);\n  };\n\n  const platformViews: any = {};\n\n  props.portfolioPlatforms.forEach((platform: SupportedPlatform) => {\n    platformViews[platform.platform] = <PlatformView platformData={platform} />;\n  });\n  const availablePlatforms = Object.keys(platformViews);\n\n  return (\n    <div>\n      <Paper square={true}>\n        <Tabs value={tabIndexValue} onChange={onTabChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\n          <Tab label=\"Portfolio\" {...a11yProps(0)} disabled={true} />\n          <Tab label=\"Zonky.cz (CZK)\" {...a11yProps(1)} disabled={!availablePlatforms.includes(SupportedPlatformTypes.ZONKY)} />\n          <Tab\n            label=\"Mintos.com (EUR)\"\n            {...a11yProps(2)}\n            disabled={!availablePlatforms.includes(SupportedPlatformTypes.MINTOS)}\n          />\n          <Tab label=\"Twino.eu (EUR)\" {...a11yProps(3)} disabled={!availablePlatforms.includes(SupportedPlatformTypes.TWINO)} />\n        </Tabs>\n      </Paper>\n\n      <div style={{ paddingTop: '8px' }}>\n        <Paper square={true}>\n          <TabPanel value={tabIndexValue} index={0}>\n            Nahrajte výpisy z účtu k zobrazení statistik z jednotlivých platforem.\n          </TabPanel>\n          <TabPanel value={tabIndexValue} index={1}>\n            {platformViews[SupportedPlatformTypes.ZONKY]}\n          </TabPanel>\n          <TabPanel value={tabIndexValue} index={2}>\n            {platformViews[SupportedPlatformTypes.MINTOS]}\n          </TabPanel>\n          <TabPanel value={tabIndexValue} index={3}>\n            {platformViews[SupportedPlatformTypes.TWINO]}\n          </TabPanel>\n        </Paper>\n      </div>\n    </div>\n  );\n};\n\nexport default PlatformsTabMenuView;\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\nimport './UploadFilesInput.css';\n\nclass UploadFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public onFileInputChange(event: any) {\n    const files = event.target.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div id=\"choose_file\">\n        <input\n          type=\"file\"\n          multiple={true}\n          onChange={e => {\n            this.onFileInputChange(e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadFilesInput;\n","import { AppBar, Paper } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { SupportedPlatform, SupportedPlatformTypes } from '../core/platforms/models';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { detectPlatform } from '../core/platforms/utils';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport './App.css';\nimport DragAndDropFilesInput from './DragAndDropFilesInput';\nimport PlatformsTabMenuView from './PlatformsTabMenuView';\nimport UploadFilesInput from './UploadFilesInput';\n\nexport type RawFileUploadedProps = {\n  onRawFileUploaded: (rawFile: ArrayBuffer, filename: string) => void;\n};\n\ntype AppState = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  public state = { portfolioPlatforms: [] };\n\n  public handleUploadedRawFile(rawFile: ArrayBuffer, filename: string) {\n    try {\n      const platformType = detectPlatform(filename);\n      let platformData: SupportedPlatform;\n\n      switch (platformType) {\n        case SupportedPlatformTypes.MINTOS:\n          platformData = new MintosPlatform();\n          break;\n        case SupportedPlatformTypes.TWINO:\n          platformData = new TwinoPlatform();\n          break;\n        case SupportedPlatformTypes.ZONKY:\n          platformData = new ZonkyPlatform();\n          break;\n        default:\n          throw Error('unknown platform');\n      }\n\n      platformData.parseASFile(rawFile);\n      platformData.processTransactions();\n\n      this.setState(prevState => ({\n        portfolioPlatforms: [...prevState.portfolioPlatforms, platformData]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/WojtylaCZ/p2folio\"\n            className=\"github-corner\"\n            aria-label=\"View source on GitHub\"\n          >\n            <svg\n              width={80}\n              height={80}\n              viewBox=\"0 0 250 250\"\n              style={{ fill: '#151513', color: '#fff', position: 'absolute', top: 0, border: 0, right: 0, zIndex: 1 }}\n              aria-hidden=\"true\"\n            >\n              <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n              <path\n                d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n                fill=\"currentColor\"\n                style={{ transformOrigin: '130px 106px' }}\n                className=\"octo-arm\"\n              />\n              <path\n                d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n                fill=\"currentColor\"\n                className=\"octo-body\"\n              />\n            </svg>\n          </a>\n          <style\n            dangerouslySetInnerHTML={{\n              __html:\n                '.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}'\n            }}\n          />\n        </div>\n\n        <div>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">P2folio - testovací aplha verze</Typography>\n            </Toolbar>\n          </AppBar>\n        </div>\n\n        <div>\n          <p>\n            <b>P2folio sjednocuje data z různých P2P platforem pro kompaktní statistiky a přehled celého portfolia.</b>\n          </p>\n          <p>\n            Projekt má veřejný kód a uveřejněný na &nbsp;\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/WojtylaCZ/p2folio\">\n              github.com\n            </a>\n            . <br />\n            Ocením jakékoliv komentáře, návrhy nebo hlášení chyb. Buď na githubu nebo třeba v této &nbsp;\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.facebook.com/groups/1813432205553867\">\n              facebookové skupině pro P2P investory\n            </a>\n            .\n          </p>\n          <p>\n            <b>\n              Data jsou zpracována pouze ve vašem prohlížeči. Nikam se neodesílají, služba nemá žádnou další část.\n              <br />\n              Pokud stránku aktualizujete, všechna data jsou ztracena.\n            </b>\n          </p>\n\n          <p>Statistiky ze zpracovávají z výpisu z účtu z jednotlivých platforem. Jak postupovat:</p>\n\n          <ul id=\"upload_tutorials\">\n            <li> Pro data z platformy Zonky.cz, stáhněte výpis z peněženky ve vašem účtě a nahrajte jej sem.</li>\n            <li>\n              Pro Mintos.com, otevřete záložku Account Statement ve vašem účtě. Pro Start Date zvolete nějaké datum dávno v\n              minulosti - například (např. 11.12.2013) a klikněte na Search. Pod tabulkou s celkovým přehledem je tlačítko\n              Download Selected List. Stáhněte daný soubor a naimportujte jej sem.\n            </li>\n            <li>\n              Pro data z platformy Twino.eu se přihlašte do svého účtu, klidněte na záložku My Investment a následně na záložku\n              Account Statement. Pro Start Date filtr zadejte nějaké den dávno v minulosti (např. 11.12.2013) a vyčkejte až se\n              nahrají informace. Klikně na tlačítko Download. Stáhněte daný soubor a naimportujte jej sem.\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"paper\">\n          <Paper square={true}>\n            <Grid container={true}>\n              <Grid item={true} xs={6}>\n                <UploadFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n              </Grid>\n              <Grid item={true} xs={6}>\n                <DragAndDropFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n              </Grid>\n              <Grid item={true} xs={12}>\n                <Paper square={true} id=\"statements_info\">\n                  Úspěšné zpracováných výpisů z účtu: {this.state.portfolioPlatforms ? this.state.portfolioPlatforms.length : '0'}\n                </Paper>\n              </Grid>\n            </Grid>\n          </Paper>\n        </div>\n\n        <div className=\"paper\" style={{ paddingTop: '30px' }}>\n          <PlatformsTabMenuView portfolioPlatforms={this.state.portfolioPlatforms} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}