{"version":3,"sources":["common/enums.ts","core/platforms/models.ts","common/utils.ts","core/platforms/TwinoPlatform.ts","core/platforms/Platform.ts","core/platforms/ZonkyPlatform.ts","core/platforms/MintosPlatform.ts","core/platforms/utils.ts","components/DragAndDropFilesInput.tsx","components/platformSpecific/MintosSpecificHeaderView.tsx","components/platformSpecific/TwinoSpecificHeaderView.tsx","components/platformSpecific/ZonkySpecificHeaderView.tsx","components/PortfolioHeaderView.tsx","components/PlatformHeaderView.tsx","components/ResultTable.tsx","components/PlatformView.tsx","components/PlatformListView.tsx","components/UploadFilesInput.tsx","components/App.tsx","index.tsx"],"names":["FileTypes","Currency","SupportedPlatformTypes","loadSelectedFile","file","cb","reader","FileReader","onerror","ex","console","log","onload","e","name","readAsArrayBuffer","getFirstWorkSheetFromRawFile","rawFile","content","Uint8Array","workbook","xlsx","read","type","Sheets","SheetNames","TwinoASFileColumnHeadersDefs","Platform","currency","monthlyResults","transactionLog","platformTotals","portfolioTotals","processingMonth","moment","this","getTransaction","transaction","dateTransaction","processingDate","isAfter","dateArray","toArray","newMonthMoment","unshift","month","result","getNewBaseResultFactory","Object","entries","transactionType","value","key","add","totals","deposit","Dinero","extraReceived","feesPaid","interestReceived","principalReceived","withdrawal","getPlatformTotals","amount","ZonkyASFileColumnHeadersDefs","TwinoPlatform","EUR","firstSheet","utils","sheet_to_json","header","dataColumnHeader","raw","blankrows","defval","range","reverse","transactionRecord","Date","getNewTransactionFactory","dataAmount","ProcessingAmount","amountPrecision","indexOf","length","intAmount","parseInt","replace","TransactionType","Math","abs","precision","PaymentType","penaltyReceived","fullFilename","startsWith","platformFilenameSubstring","endsWith","platformFileType","platform","TWINO","XLSX","TransactionId","LoanId","MintosASFileColumnHeadersDefs","ZonkyPlatform","CZK","ASFileColumnHeaders","headerNotFound","rowNumber","splice","Error","getAmount","plaformFeePaid","secondaryMarketFeePaid","getInterestReceived","InterestReceived","multiply","getPrincipalReceived","PrincipalReceived","penalty","subtract","isZero","rawAmount","rawPrincipalReceived","principalReceivedPrecision","principalReceivedInt","includes","ZONKY","Direction","MintosPlatform","parseFloat","Turnover","toString","Details","referalReceived","cashbackReceived","currencyExchangeFeePaid","toLowerCase","incomingCurrencyExchange","outgoingCurrencyExchange","MINTOS","Balance","DragAndDropFilesInput","event","filename","props","onRawFileUploaded","target","stopPropagation","preventDefault","dataTransfer","dropEffect","files","onLoadHandler","bind","id","onDragOver","handleDragOver","onDrop","handleFileSelect","React","Component","MintosSpecificHeaderView","platformData","campaignRewards","toFormat","TwinoSpecificHeaderView","ZonkySpecificHeaderView","PortfolioHeaderView","getPortfolioTotals","PlatformHeaderView","platformSpecificHeader","ResultTable","className","renderTableHeader","renderTableData","map","index","monthResult","undefined","format","toUpperCase","PlatformView","PlatformListView","platformList","portfolioPlatforms","UploadFilesInput","multiple","onChange","onFileInputChange","App","state","isPlatformFileValid","detectPlatform","parseASFile","processTransactions","setState","prevState","href","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","dangerouslySetInnerHTML","__html","rawfile","handleUploadedRawFile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32eceabb.chunk.js","sourcesContent":["export enum FileTypes {\n  XLSX = '.xlsx',\n  XLS = '.xls',\n  CSV = '.csv',\n  PDF = '.pdf'\n  // RAW_TEXT = 'raw_text'\n}\n\nexport enum Currency {\n  CZK = 'CZK',\n  EUR = 'EUR'\n}\n","import { Moment } from 'moment';\n\nimport {\n  IMintosDeposit,\n  IMintosExtraReceived,\n  IMintosFeesPaid,\n  IMintosInterestReceived,\n  IMintosWithdrawal,\n  MintosPlatform\n} from './MintosPlatform';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { IZonkyFeesPaid, IZonkyInterestReceived, ZonkyPlatform } from './ZonkyPlatform';\n\nexport type SupportedPlatform = MintosPlatform | TwinoPlatform | ZonkyPlatform;\n\nexport enum SupportedPlatformTypes {\n  MINTOS = 'mintos',\n  TWINO = 'twino',\n  ZONKY = 'zonky'\n}\n\nexport interface IPortfolioResult {\n  deposit: Dinero.Dinero;\n  withdrawal: Dinero.Dinero;\n  principalReceived: Dinero.Dinero;\n  interestReceived: Dinero.Dinero;\n  extraReceived: Dinero.Dinero;\n  feesPaid: Dinero.Dinero;\n}\n\nexport interface IGeneralDeposit {\n  deposit?: Dinero.Dinero;\n}\n\nexport interface IGeneralWithdrawal {\n  withdrawal?: Dinero.Dinero;\n}\n\nexport interface IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  deposit: Deposit;\n  withdrawal: Withdrawal;\n  principalReceived: {\n    principalReceived?: Dinero.Dinero;\n  };\n  interestReceived: InterestReceived;\n  extraReceived: ExtraReceived;\n  feesPaid: FeePaid;\n}\n\nexport interface IMonthlyResults<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  month: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport interface ITransaction<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  processingDate: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport type IDepositOptions = IGeneralDeposit | IMintosDeposit;\nexport type IExtraReceivedOptions = IMintosExtraReceived | {};\nexport type IFeePaidOptions = IMintosFeesPaid | IZonkyFeesPaid;\nexport type IInterestReceivedOptions = IMintosInterestReceived | IZonkyInterestReceived;\n\nexport type IWithdrawalOptions = IGeneralWithdrawal | IMintosWithdrawal;\n","import xlsx from 'xlsx';\n\nexport function loadSelectedFile(file: File, cb: (event: any, filename: string) => void) {\n  const reader = new FileReader();\n  reader.onerror = ex => {\n    // FIXME\n    console.log(ex);\n  };\n  reader.onload = (e: any) => {\n    cb(e, file.name);\n  };\n  reader.readAsArrayBuffer(file);\n}\n\nexport function getFirstWorkSheetFromRawFile(rawFile: ArrayBuffer): xlsx.WorkSheet {\n  const content = new Uint8Array(rawFile);\n  const workbook = xlsx.read(content, { type: 'array' });\n  const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n  return firstSheet;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum TwinoASFileColumnHeadersDefs {\n  Date = 'Processing Date',\n  TransactionId = 'Transaction ID',\n  TransactionType = 'Type',\n  PaymentType = 'Description',\n  LoanId = 'Loan Number',\n  ProcessingAmount = 'Amount, EUR'\n}\n\nexport interface ITwinoInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class TwinoPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.TWINO;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.startsWith(TwinoPlatform.platformFilenameSubstring) && fullFilename.endsWith(TwinoPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'account_statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly dataColumnHeader = [\n    TwinoASFileColumnHeadersDefs.Date,\n    TwinoASFileColumnHeadersDefs.TransactionId,\n    TwinoASFileColumnHeadersDefs.TransactionType,\n    TwinoASFileColumnHeadersDefs.PaymentType,\n    TwinoASFileColumnHeadersDefs.LoanId,\n    TwinoASFileColumnHeadersDefs.ProcessingAmount\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: TwinoPlatform.dataColumnHeader,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 3\n    });\n    this.transactionLog = transactionLog.reverse();\n  }\n\n  protected *getTransaction(): IterableIterator<\n    ITransaction<{}, ITwinoInterestReceived, {}, IGeneralDeposit, IGeneralWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[TwinoASFileColumnHeadersDefs.Date], 'MM/DD/YY HH:mm');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const dataAmount = transactionRecord[TwinoASFileColumnHeadersDefs.ProcessingAmount];\n\n      let amountPrecision = 0;\n      if (dataAmount.indexOf('.') >= 0) {\n        amountPrecision = dataAmount.length - (dataAmount.indexOf('.') + 1);\n      }\n      const intAmount = parseInt(transactionRecord[TwinoASFileColumnHeadersDefs.ProcessingAmount].replace(/\\./g, ''), 10);\n\n      switch (transactionRecord[TwinoASFileColumnHeadersDefs.TransactionType]) {\n        case 'FUNDING':\n          if (intAmount > 0) {\n            transaction.result.deposit.deposit = Dinero({\n              amount: Math.abs(intAmount),\n              precision: amountPrecision,\n              currency: this.currency\n            });\n          } else if (intAmount < 0) {\n            transaction.result.withdrawal.withdrawal = Dinero({\n              amount: Math.abs(intAmount),\n              precision: amountPrecision,\n              currency: this.currency\n            });\n          }\n          break;\n      }\n\n      switch (transactionRecord[TwinoASFileColumnHeadersDefs.PaymentType]) {\n        case 'PENALTY':\n          transaction.result.interestReceived.penaltyReceived = Dinero({\n            amount: Math.abs(intAmount),\n            precision: amountPrecision,\n            currency: this.currency\n          });\n          break;\n        case 'INTEREST':\n          transaction.result.interestReceived.interestReceived = Dinero({\n            amount: intAmount,\n            precision: amountPrecision,\n            currency: this.currency\n          });\n          break;\n      }\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {\n        deposit: Dinero({ currency: this.currency })\n      },\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {},\n      withdrawal: {\n        withdrawal: Dinero({ currency: this.currency })\n      }\n    };\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\n\nimport { Currency } from '../../common/enums';\n\nimport { IBaseResult, IMonthlyResults, IPortfolioResult, ITransaction } from './models';\n\nexport abstract class Platform {\n  public abstract currency: Currency;\n\n  public monthlyResults: Array<IMonthlyResults<any, any, any, any, any>> = [];\n\n  protected transactionLog: any[] = [];\n\n  private platformTotals?: IBaseResult<any, any, any, any, any>;\n  private portfolioTotals?: IPortfolioResult;\n\n  public processTransactions() {\n    let processingMonth = moment(0);\n\n    for (const transaction of this.getTransaction()) {\n      const dateTransaction = transaction.processingDate;\n\n      if (dateTransaction.isAfter(processingMonth, 'month')) {\n        const dateArray = dateTransaction.toArray();\n        const newMonthMoment = moment(`${dateArray[0]}-${dateArray[1] + 1}-01`, 'YYYY-MM-DD');\n\n        this.monthlyResults.unshift({\n          month: newMonthMoment,\n          result: this.getNewBaseResultFactory()\n        });\n        processingMonth = newMonthMoment;\n      }\n\n      for (const [transactionType, value] of Object.entries<any>(transaction.result)) {\n        for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore TODO\n          this.monthlyResults[0].result[transactionType][key] = this.monthlyResults[0].result[transactionType][key].add(result);\n        }\n      }\n    }\n  }\n\n  public getPlatformTotals() {\n    if (!this.platformTotals) {\n      const totals = this.getNewBaseResultFactory();\n      for (const month of this.monthlyResults) {\n        for (const [transactionType, value] of Object.entries<any>(month.result)) {\n          for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n            // @ts-ignore\n            totals[transactionType][key] = totals[transactionType][key].add(result);\n          }\n        }\n      }\n      this.platformTotals = totals;\n    }\n    return this.platformTotals;\n  }\n\n  public getPortfolioTotals() {\n    if (!this.portfolioTotals) {\n      const totals: IPortfolioResult = {\n        deposit: Dinero({ currency: this.currency }),\n        extraReceived: Dinero({ currency: this.currency }),\n        feesPaid: Dinero({ currency: this.currency }),\n        interestReceived: Dinero({ currency: this.currency }),\n        principalReceived: Dinero({ currency: this.currency }),\n        withdrawal: Dinero({ currency: this.currency })\n      };\n\n      const platformTotals = this.getPlatformTotals();\n\n      for (const [transactionType, value] of Object.entries(platformTotals)) {\n        for (const [, amount] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore\n          totals[transactionType] = totals[transactionType].add(amount);\n        }\n      }\n\n      this.portfolioTotals = totals;\n    }\n\n    return this.portfolioTotals;\n  }\n\n  protected abstract parseASFile(rawFile: ArrayBuffer): void;\n  protected abstract getTransaction(): IterableIterator<ITransaction<any, any, any, any, any>>;\n  protected abstract getNewBaseResultFactory(): IBaseResult<any, any, any, any, any>;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum ZonkyASFileColumnHeadersDefs {\n  Date = 'Datum',\n  Direction = 'Příjem / Výdaj',\n  TransactionType = 'Typ transakce',\n  ProcessingAmount = 'Částka',\n  InterestReceived = 'Jistina',\n  PrincipalReceived = 'Úrok'\n}\n\nexport interface IZonkyFeesPaid {\n  plaformFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\nexport interface IZonkyInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class ZonkyPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.ZONKY;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(ZonkyPlatform.platformFilenameSubstring) && fullFilename.endsWith(ZonkyPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'transakce-';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    ZonkyASFileColumnHeadersDefs.Date,\n    ZonkyASFileColumnHeadersDefs.Direction,\n    ZonkyASFileColumnHeadersDefs.TransactionType,\n    ZonkyASFileColumnHeadersDefs.ProcessingAmount,\n    ZonkyASFileColumnHeadersDefs.PrincipalReceived,\n    ZonkyASFileColumnHeadersDefs.InterestReceived\n  ];\n\n  public currency = Currency.CZK;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: ZonkyPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 4\n    });\n\n    let headerNotFound = true;\n    for (let rowNumber = 0; rowNumber < 15; rowNumber++) {\n      if (transactionLog[rowNumber][ZonkyASFileColumnHeadersDefs.Date] === ZonkyASFileColumnHeadersDefs.Date) {\n        transactionLog.splice(0, rowNumber + 1);\n        headerNotFound = false;\n        break;\n      }\n    }\n    if (headerNotFound) {\n      throw Error('Data header not found');\n    }\n    this.transactionLog = transactionLog;\n  }\n\n  public *getTransaction(): IterableIterator<\n    ITransaction<{}, IZonkyInterestReceived, IZonkyFeesPaid, IGeneralDeposit, IGeneralWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[ZonkyASFileColumnHeadersDefs.Date], 'DD.MM.YYYY');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const amount = this.getAmount(transactionRecord[ZonkyASFileColumnHeadersDefs.ProcessingAmount], Currency.CZK);\n\n      switch (transactionRecord[ZonkyASFileColumnHeadersDefs.TransactionType]) {\n        case 'Poplatek za investování':\n          transaction.result.feesPaid.plaformFeePaid = amount;\n          break;\n        case 'Nabití vaší peněženky':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'Výběr z peněženky na váš účet':\n          transaction.result.withdrawal.withdrawal = amount;\n          break;\n        case 'Poplatek za prodej na sekundárním trhu':\n          transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n          break;\n        case 'Prodej na sekundárním trhu':\n          transaction.result.principalReceived.principalReceived = amount;\n          break;\n        case 'Vrácení platby':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          ).multiply(-1);\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          ).multiply(-1);\n          break;\n\n        case 'Splátka půjčky':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          );\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          );\n\n          const penalty = amount.subtract(\n            transaction.result.principalReceived.principalReceived.add(transaction.result.interestReceived.interestReceived)\n          );\n          if (!penalty.isZero()) {\n            transaction.result.interestReceived.penaltyReceived = penalty;\n          }\n\n          break;\n      }\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: { deposit: Dinero({ currency: this.currency }) },\n      extraReceived: {},\n      feesPaid: {\n        plaformFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {\n        principalReceived: Dinero({ currency: this.currency })\n      },\n      withdrawal: { withdrawal: Dinero({ currency: this.currency }) }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    const amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n\n  private getPrincipalReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n\n  private getInterestReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum MintosASFileColumnHeadersDefs {\n  TransactionId = 'TransactionId',\n  Date = 'Date',\n  Details = 'Details',\n  Turnover = 'Turnover',\n  Balance = 'Balance',\n  Currency = 'Currency'\n}\n\nexport interface IMintosDeposit extends IGeneralDeposit {\n  incomingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport interface IMintosExtraReceived {\n  referalReceived?: Dinero.Dinero;\n  cashbackReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosFeesPaid {\n  currencyExchangeFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\n\nexport interface IMintosInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosWithdrawal extends IGeneralWithdrawal {\n  outgoingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport class MintosPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.MINTOS;\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(MintosPlatform.platformFilenameSubstring) && fullFilename.endsWith(MintosPlatform.platformFileType)\n    );\n  }\n  private static readonly platformFilenameSubstring = 'account-statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    MintosASFileColumnHeadersDefs.TransactionId,\n    MintosASFileColumnHeadersDefs.Date,\n    MintosASFileColumnHeadersDefs.Details,\n    MintosASFileColumnHeadersDefs.Turnover,\n    MintosASFileColumnHeadersDefs.Balance,\n    MintosASFileColumnHeadersDefs.Currency\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: MintosPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 1\n    });\n    this.transactionLog = transactionLog;\n  }\n\n  protected *getTransaction(): IterableIterator<\n    ITransaction<IMintosExtraReceived, {}, IMintosFeesPaid, IMintosDeposit, IMintosWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[MintosASFileColumnHeadersDefs.Date], 'YYYY-MM-DD HH:mm:ss');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const currency = transactionRecord[MintosASFileColumnHeadersDefs.Currency];\n      const rawAmount = parseFloat(transactionRecord[MintosASFileColumnHeadersDefs.Turnover]).toString();\n\n      const amount = this.getAmount(rawAmount, currency);\n\n      switch (transactionRecord[MintosASFileColumnHeadersDefs.Details]) {\n        case 'Refer a friend bonus':\n          transaction.result.extraReceived.referalReceived = amount;\n          break;\n        case 'Cashback bonus':\n          transaction.result.extraReceived.cashbackReceived = amount;\n          break;\n        case 'Incoming client payment':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'FX commission':\n          transaction.result.feesPaid.currencyExchangeFeePaid = amount;\n          break;\n      }\n\n      if (transactionRecord[MintosASFileColumnHeadersDefs.Details].toLowerCase().indexOf('interest income') >= 0) {\n        transaction.result.interestReceived.interestReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Secondary market fee')) {\n        transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Late payment fee income')) {\n        transaction.result.interestReceived.penaltyReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Incoming currency exchange transaction')) {\n        transaction.result.deposit.incomingCurrencyExchange = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Outgoing currency exchange transaction')) {\n        transaction.result.withdrawal.outgoingCurrencyExchange = amount;\n      } else if (\n        transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Discount/premium for secondary market transaction')\n      ) {\n        // TODO\n      }\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {\n        deposit: Dinero({ currency: this.currency }),\n        incomingCurrencyExchange: Dinero({ currency: this.currency })\n      },\n      extraReceived: {\n        cashbackReceived: Dinero({ currency: this.currency }),\n        referalReceived: Dinero({ currency: this.currency })\n      },\n      feesPaid: {\n        currencyExchangeFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {},\n      withdrawal: {\n        withdrawal: Dinero({ currency: this.currency }),\n        outgoingCurrencyExchange: Dinero({ currency: this.currency })\n      }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    let amountPrecision = 0;\n    if (rawAmount.indexOf('.') >= 0) {\n      amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    }\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n}\n","import { Moment } from 'moment';\n\nimport { MintosPlatform } from './MintosPlatform';\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport function detectPlatform(filename: string): SupportedPlatformTypes {\n  if (MintosPlatform.isPlatformFileValid(filename)) {\n    return MintosPlatform.platform;\n  } else if (TwinoPlatform.isPlatformFileValid(filename)) {\n    return TwinoPlatform.platform;\n  } else if (ZonkyPlatform.isPlatformFileValid(filename)) {\n    return ZonkyPlatform.platform;\n  } else {\n    throw new Error('unknown file');\n  }\n}\n\nexport function getNewTransactionFactory(processingDate: Moment): ITransaction<any, any, any, any, any> {\n  return {\n    processingDate,\n    result: {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    }\n  };\n}\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass DragAndDropFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public handleDragOver(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public handleFileSelect(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = event.dataTransfer.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        id=\"drop_zone\"\n        onDragOver={e => {\n          this.handleDragOver(e);\n        }}\n        onDrop={e => this.handleFileSelect(e)}\n      >\n        Drop files here\n      </div>\n    );\n  }\n}\n\nexport default DragAndDropFilesInput;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst MintosSpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  const campaignRewards = totals.extraReceived.referalReceived.add(totals.extraReceived.cashbackReceived);\n  return (\n    <div>\n      <h2>Mintos - web statistics</h2>\n      <h4>\n        Interest homepage:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </h4>\n      <h4>\n        Late Payment Fees homepage:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </h4>\n      <h4>\n        Service fees homepage:\n        {totals.feesPaid.secondaryMarketFeePaid.add(totals.feesPaid.currencyExchangeFeePaid).toFormat()}\n      </h4>\n      <h4>\n        Campaign Rewards:\n        {campaignRewards.toFormat()}\n      </h4>\n      <h4>\n        Deposit - account statement page:\n        {totals.deposit.deposit!.add(campaignRewards).toFormat()}\n      </h4>\n      <h4>\n        Incoming Currency Exchange - account statement page:\n        {totals.deposit.incomingCurrencyExchange.toFormat()}\n      </h4>\n      <h4>\n        Outgoing Currency Exchange - account statement page:\n        {totals.withdrawal.outgoingCurrencyExchange.toFormat()}\n      </h4>\n      <h4>\n        Secondary Market Fees - account statement page:\n        {totals.feesPaid.secondaryMarketFeePaid.toFormat()}\n      </h4>\n      <h4>\n        Currency Exchange Fee - account statement page:\n        {totals.feesPaid.currencyExchangeFeePaid.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default MintosSpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst TwinoSpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n\n  return (\n    <div>\n      <h2>Twino.eu - web statistics</h2>\n      <h4>\n        Deposit - homepage:\n        {totals.deposit.deposit.toFormat()}\n      </h4>\n      <h4>\n        Withdrawal - homepage:\n        {totals.deposit.deposit.toFormat()}\n      </h4>\n      <h4>\n        Interest - homepage:\n        {totals.interestReceived.interestReceived.add(totals.interestReceived.penaltyReceived).toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default TwinoSpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst ZonkySpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  return (\n    <div>\n      <h2>Zonky - web statistics</h2>\n      <h4>\n        Vyděláno :\n        {totals.interestReceived.interestReceived\n          .add(totals.interestReceived.penaltyReceived)\n          .subtract(totals.feesPaid.plaformFeePaid)\n          .subtract(totals.feesPaid.secondaryMarketFeePaid)\n          .toFormat()}\n      </h4>\n\n      <h4>\n        Zaplaceno na poplatcích:\n        {totals.feesPaid.plaformFeePaid.add(totals.feesPaid.secondaryMarketFeePaid).toFormat()}\n      </h4>\n\n      <h4>\n        Úrok zaplacený:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </h4>\n      <h4>\n        Pokuty:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default ZonkySpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from './PlatformView';\n\nconst PortfolioHeaderView = (props: PlatformDataProps) => {\n  const portfolioTotals = props.platformData.getPortfolioTotals();\n  return (\n    <div>\n      <h2>Unified Totals</h2>\n      <h4>\n        Deposit:\n        {portfolioTotals.deposit.toFormat()}\n      </h4>\n      <h4>\n        Withdrawal:\n        {portfolioTotals.withdrawal.toFormat()}\n      </h4>\n      <h4>\n        Principal received:\n        {portfolioTotals.principalReceived!.toFormat()}\n      </h4>\n      <h4>\n        Interests:\n        {portfolioTotals.interestReceived!.toFormat()}\n      </h4>\n      <h4>\n        Fees paid:\n        {portfolioTotals.feesPaid!.toFormat()}\n      </h4>\n      <h4>\n        Extra received:\n        {portfolioTotals.extraReceived!.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default PortfolioHeaderView;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport MintosSpecificHeaderView from './platformSpecific/MintosSpecificHeaderView';\nimport TwinoSpecificHeaderView from './platformSpecific/TwinoSpecificHeaderView';\nimport ZonkySpecificHeaderView from './platformSpecific/ZonkySpecificHeaderView';\nimport { PlatformDataProps } from './PlatformView';\nimport PortfolioHeaderView from './PortfolioHeaderView';\n\nconst PlatformHeaderView = (props: PlatformDataProps) => {\n  let platformSpecificHeader;\n\n  if (props.platformData instanceof MintosPlatform) {\n    platformSpecificHeader = <MintosSpecificHeaderView platformData={props.platformData} />;\n  } else if (props.platformData instanceof TwinoPlatform) {\n    platformSpecificHeader = <TwinoSpecificHeaderView platformData={props.platformData} />;\n  } else if (props.platformData instanceof ZonkyPlatform) {\n    platformSpecificHeader = <ZonkySpecificHeaderView platformData={props.platformData} />;\n  }\n\n  return (\n    <div>\n      <hr />\n      <PortfolioHeaderView platformData={props.platformData} />\n      <hr />\n      {platformSpecificHeader}\n      <hr />\n    </div>\n  );\n};\nexport default PlatformHeaderView;\n","import Dinero from 'dinero.js';\nimport React from 'react';\n\nimport {\n  IDepositOptions,\n  IExtraReceivedOptions,\n  IFeePaidOptions,\n  IInterestReceivedOptions,\n  IMonthlyResults,\n  IWithdrawalOptions\n} from '../core/platforms/models';\n\nimport { PlatformDataProps } from './PlatformView';\n\nclass ResultTable extends React.Component<PlatformDataProps> {\n  public render() {\n    return (\n      <div>\n        <table className=\"ui celled table\" id=\"students\">\n          <thead>\n            <tr>{this.renderTableHeader()}</tr>\n          </thead>\n          <tbody>{this.renderTableData()}</tbody>\n        </table>\n      </div>\n    );\n  }\n\n  private renderTableData() {\n    if (this.props.platformData.monthlyResults.length > 0) {\n      return this.props.platformData.monthlyResults.map(\n        (\n          month: IMonthlyResults<\n            IExtraReceivedOptions,\n            IInterestReceivedOptions,\n            IFeePaidOptions,\n            IDepositOptions,\n            IWithdrawalOptions\n          >,\n          index: any\n        ) => {\n          const monthResult = {\n            deposit: undefined,\n            withdrawal: undefined,\n            feesPaid: undefined,\n            extraReceived: undefined,\n            interestReceived: undefined\n          } as any;\n\n          for (const [transactionType, value] of Object.entries(month.result)) {\n            for (const [, result] of Object.entries<Dinero.Dinero>(value)) {\n              if (monthResult[transactionType]) {\n                monthResult[transactionType] = monthResult[transactionType].add(result);\n              } else {\n                monthResult[transactionType] = result;\n              }\n            }\n          }\n\n          return (\n            <tr key={index}>\n              <td>{month.month.format('MMM YYYY')}</td>\n              <td>{monthResult.deposit ? monthResult.deposit.toFormat() : ''}</td>\n              <td>{monthResult.withdrawal ? monthResult.withdrawal.toFormat() : ''}</td>\n              <td>{monthResult.interestReceived ? monthResult.interestReceived.toFormat() : ''}</td>\n              <td>{monthResult.feesPaid ? monthResult.feesPaid.toFormat() : ''}</td>\n              <td>{monthResult.extraReceived ? monthResult.extraReceived.toFormat() : ''}</td>\n            </tr>\n          );\n        }\n      );\n    } else {\n      return <tr key={0} />;\n    }\n  }\n\n  private renderTableHeader() {\n    return ['date', 'deposit', 'withdrawal', 'interestReceived', 'feesPaid', 'extraReceived'].map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  }\n}\n\nexport default ResultTable;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformHeaderView from './PlatformHeaderView';\nimport ResultTable from './ResultTable';\n\nexport type PlatformDataProps = {\n  platformData: SupportedPlatform;\n};\n\nconst PlatformView = (props: PlatformDataProps) => {\n  return (\n    <div>\n      <PlatformHeaderView platformData={props.platformData} />\n      <ResultTable platformData={props.platformData} />\n    </div>\n  );\n};\n\nexport default PlatformView;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformView from './PlatformView';\n\nexport type PortfolioPlatformsProps = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nconst PlatformListView = (props: PortfolioPlatformsProps) => {\n  const platformList = props.portfolioPlatforms.map((platform: SupportedPlatform, index: number) => {\n    return <PlatformView key={index} platformData={platform} />;\n  });\n\n  return <div className=\"platform-list\">{platformList}</div>;\n};\n\nexport default PlatformListView;\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass UploadFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public onFileInputChange(event: any) {\n    const files = event.target.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"ui segment\">\n        <input\n          type=\"file\"\n          multiple={true}\n          onChange={e => {\n            this.onFileInputChange(e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadFilesInput;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { SupportedPlatform, SupportedPlatformTypes } from '../core/platforms/models';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { detectPlatform } from '../core/platforms/utils';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport DragAndDropFilesInput from './DragAndDropFilesInput';\nimport PlatformListView from './PlatformListView';\nimport UploadFilesInput from './UploadFilesInput';\n\nexport type RawFileUploadedProps = {\n  onRawFileUploaded: (rawFile: ArrayBuffer, filename: string) => void;\n};\n\ntype AppState = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  public state = { portfolioPlatforms: [] };\n\n  public handleUploadedRawFile(rawFile: ArrayBuffer, filename: string) {\n    try {\n      const platformType = detectPlatform(filename);\n      let platformData: SupportedPlatform;\n\n      switch (platformType) {\n        case SupportedPlatformTypes.MINTOS:\n          platformData = new MintosPlatform();\n          break;\n        case SupportedPlatformTypes.TWINO:\n          platformData = new TwinoPlatform();\n          break;\n        case SupportedPlatformTypes.ZONKY:\n          platformData = new ZonkyPlatform();\n          break;\n        default:\n          throw Error('unknown platform');\n      }\n\n      platformData.parseASFile(rawFile);\n      platformData.processTransactions();\n\n      this.setState(prevState => ({\n        portfolioPlatforms: [...prevState.portfolioPlatforms, platformData]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>\n          <a href=\"https://github.com/WojtylaCZ/p2folio\" className=\"github-corner\" aria-label=\"View source on GitHub\">\n            <svg\n              width={80}\n              height={80}\n              viewBox=\"0 0 250 250\"\n              style={{ fill: '#151513', color: '#fff', position: 'absolute', top: 0, border: 0, right: 0 }}\n              aria-hidden=\"true\"\n            >\n              <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n              <path\n                d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n                fill=\"currentColor\"\n                style={{ transformOrigin: '130px 106px' }}\n                className=\"octo-arm\"\n              />\n              <path\n                d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n                fill=\"currentColor\"\n                className=\"octo-body\"\n              />\n            </svg>\n          </a>\n          <style\n            dangerouslySetInnerHTML={{\n              __html:\n                '.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}'\n            }}\n          />\n        </div>\n        <div>\n          <h2> P2folio - early aplha version </h2>\n          <ul>\n            <li>\n              {' '}\n              Project is in an early stage and hosted at <a href=\"https://github.com/WojtylaCZ/p2folio\"> github.com </a>. I will\n              appreciate any comments, ideas, proposals or bug reports.\n            </li>\n          </ul>\n          <h4>There is no backend for this service, all data is stored only in your browser. (Except analytics for web usage)</h4>\n          When you refresh the page, all data is lost.\n          <ul>\n            <li> Pro Zonky.cz, stahnete vypis z penezenky a naimportujte jej sem.</li>\n            <li>\n              For Mintos.com, go to Account Statement tab in your account, for Start Date filter put there some day very long time\n              ago (eg.g 11.12.2013), hit Search. Below a first table, there is button Download Selected List. Download the file\n              and import that file here.\n            </li>\n            <li>\n              For Twino.eu, log in to your account, go to My Investment tab, then Account Statement and for Start Date filter put\n              there some day very long time ago (eg.g 11.12.2013) and wait for data to load. There is a button Download. Download\n              the file and import that file here.\n            </li>\n          </ul>\n          <UploadFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          <DragAndDropFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          Account statements: {this.state.portfolioPlatforms ? this.state.portfolioPlatforms.length : '0'}\n        </div>\n        <div>\n          <PlatformListView portfolioPlatforms={this.state.portfolioPlatforms} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}