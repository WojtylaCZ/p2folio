{"version":3,"sources":["common/enums.ts","core/platforms/models.ts","core/platforms/Platform.ts","core/platforms/MintosPlatform.ts","core/platforms/TwinoPlatform.ts","core/platforms/ZonkyPlatform.ts","common/utils.ts","components/DragAndDropFilesInput.tsx","components/UploadFilesInput.tsx","components/App.tsx","core/platforms/utils.ts","index.tsx"],"names":["FileTypes","Currency","SupportedPlatformTypes","Platform","rawFile","MintosPlatform","fullFilename","includes","platformFilenameSubstring","endsWith","platformFileType","platform","MINTOS","XLSX","TwinoPlatform","startsWith","TWINO","ZonkyPlatform","loadSelectedFile","file","cb","reader","FileReader","onerror","ex","console","log","onload","e","name","readAsArrayBuffer","ZONKY","DragAndDropFilesInput","event","filename","this","props","onRawFileUploaded","target","result","stopPropagation","preventDefault","dataTransfer","dropEffect","files","onLoadHandler","bind","id","onDragOver","handleDragOver","onDrop","handleFileSelect","React","Component","UploadFilesInput","className","type","multiple","onChange","onFileInputChange","App","state","portfolioPlatformDataArray","platformData","isPlatformFileValid","Error","detectPlatform","setState","prevState","rawfile","handleUploadedRawFile","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ac24e0b.chunk.js","sourcesContent":["export enum FileTypes {\n  XLSX = '.xlsx',\n  XLS = '.xls',\n  CSV = '.csv',\n  PDF = '.pdf'\n  // RAW_TEXT = 'raw_text'\n}\n\nexport enum Currency {\n  CZK = 'CZK',\n  EUR = 'EUR'\n}\n","import { MintosPlatform } from './MintosPlatform';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport type SupportedPlatform = MintosPlatform | TwinoPlatform | ZonkyPlatform;\n\nexport enum SupportedPlatformTypes {\n  MINTOS = 'mintos',\n  TWINO = 'twino',\n  ZONKY = 'zonky'\n}\n","export abstract class Platform {\n  protected abstract rawFile: ArrayBuffer;\n}\n","import { FileTypes } from '../../common/enums';\n\nimport { SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\n\nexport class MintosPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.MINTOS;\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(MintosPlatform.platformFilenameSubstring) &&\n      fullFilename.endsWith(MintosPlatform.platformFileType)\n    );\n  }\n  protected static readonly platformFilenameSubstring = 'account-statement';\n  protected static readonly platformFileType = FileTypes.XLSX;\n\n  protected rawFile: ArrayBuffer;\n\n  constructor(rawFile: ArrayBuffer) {\n    super();\n    this.rawFile = rawFile;\n  }\n}\n","import { FileTypes } from '../../common/enums';\n\nimport { SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\n\nexport class TwinoPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.TWINO;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.startsWith(TwinoPlatform.platformFilenameSubstring) &&\n      fullFilename.endsWith(TwinoPlatform.platformFileType)\n    );\n  }\n\n  protected static readonly platformFilenameSubstring = 'account_statement';\n  protected static readonly platformFileType = FileTypes.XLSX;\n\n  protected rawFile: ArrayBuffer;\n\n  constructor(rawFile: ArrayBuffer) {\n    super();\n    this.rawFile = rawFile;\n  }\n}\n","import { FileTypes } from '../../common/enums';\n\nimport { SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\n\nexport class ZonkyPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.ZONKY;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(ZonkyPlatform.platformFilenameSubstring) &&\n      fullFilename.endsWith(ZonkyPlatform.platformFileType)\n    );\n  }\n\n  protected static readonly platformFilenameSubstring = 'transakce-';\n  protected static readonly platformFileType = FileTypes.XLSX;\n\n  protected rawFile: ArrayBuffer;\n\n  constructor(rawFile: ArrayBuffer) {\n    super();\n    this.rawFile = rawFile;\n  }\n}\n","export function loadSelectedFile(\n  file: File,\n  cb: (event: any, filename: string) => void\n) {\n  const reader = new FileReader();\n  reader.onerror = ex => {\n    // FIXME\n    console.log(ex);\n  };\n  reader.onload = (e: any) => {\n    cb(e, file.name);\n  };\n  reader.readAsArrayBuffer(file);\n}\n","import React from \"react\";\n\nimport { loadSelectedFile } from \"../common/utils\";\n\nimport { RawFileUploadedProps } from \"./App\";\n\nclass DragAndDropFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public handleDragOver(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"copy\";\n  }\n\n  public handleFileSelect(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = event.dataTransfer.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        id=\"drop_zone\"\n        onDragOver={e => {\n          this.handleDragOver(e);\n        }}\n        onDrop={e => this.handleFileSelect(e)}\n      >\n        Drop files here\n      </div>\n    );\n  }\n}\n\nexport default DragAndDropFilesInput;\n","import React from \"react\";\n\nimport { loadSelectedFile } from \"../common/utils\";\n\nimport { RawFileUploadedProps } from \"./App\";\n\nclass UploadFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public onFileInputChange(event: any) {\n    const files = event.target.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"ui segment\">\n        <input\n          type=\"file\"\n          multiple={true}\n          onChange={e => {\n            this.onFileInputChange(e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadFilesInput;\n","import React from \"react\";\n\nimport { MintosPlatform } from \"../core/platforms/MintosPlatform\";\nimport { SupportedPlatform, SupportedPlatformTypes } from \"../core/platforms/models\";\nimport { TwinoPlatform } from \"../core/platforms/TwinoPlatform\";\nimport { detectPlatform } from \"../core/platforms/utils\";\nimport { ZonkyPlatform } from \"../core/platforms/ZonkyPlatform\";\n\nimport DragAndDropFilesInput from \"./DragAndDropFilesInput\";\nimport UploadFilesInput from \"./UploadFilesInput\";\n\nexport type RawFileUploadedProps = {\n  onRawFileUploaded: (rawFile: ArrayBuffer, filename: string) => void;\n};\n\ntype AppState = {\n  portfolioPlatformDataArray: (SupportedPlatform)[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  public state = { portfolioPlatformDataArray: [] };\n\n  public handleUploadedRawFile(rawFile: ArrayBuffer, filename: string) {\n\n    try {\n    const platformType = detectPlatform(filename);\n    let platformData: SupportedPlatform;\n\n    switch (platformType) {\n      case SupportedPlatformTypes.MINTOS:\n        platformData = new MintosPlatform(rawFile);\n        break;\n      case SupportedPlatformTypes.TWINO:\n        platformData = new TwinoPlatform(rawFile);\n        break;\n      case SupportedPlatformTypes.ZONKY:\n        platformData = new ZonkyPlatform(rawFile);\n        break;\n      default:\n        throw Error('unknown platform');\n    }\n\n    this.setState(prevState => ({\n      portfolioPlatformDataArray: [...prevState.portfolioPlatformDataArray, platformData]\n    }));\n  }catch (e) {\n    console.log(e);\n  }\n}\n\n  public render() {\n    return (\n      <div>\n        <UploadFilesInput\n          onRawFileUploaded={(rawfile, filename) =>\n            this.handleUploadedRawFile(rawfile, filename)\n          }\n        />\n        <DragAndDropFilesInput\n          onRawFileUploaded={(rawfile, filename) =>\n            this.handleUploadedRawFile(rawfile, filename)\n          }\n        />\n        Account statements:{\" \"}\n        {this.state.portfolioPlatformDataArray\n          ? this.state.portfolioPlatformDataArray.length\n          : \"0\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { MintosPlatform } from './MintosPlatform';\nimport { SupportedPlatformTypes } from './models';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport function detectPlatform(filename: string): SupportedPlatformTypes {\n  if (MintosPlatform.isPlatformFileValid(filename)) {\n    return MintosPlatform.platform;\n  } else if (TwinoPlatform.isPlatformFileValid(filename)) {\n    return TwinoPlatform.platform;\n  } else if (ZonkyPlatform.isPlatformFileValid(filename)) {\n    return ZonkyPlatform.platform;\n  } else {\n    throw new Error('unknown file');\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}