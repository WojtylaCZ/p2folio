{"version":3,"sources":["common/enums.ts","core/platforms/models.ts","common/utils.ts","core/platforms/TwinoPlatform.ts","core/platforms/Platform.ts","core/platforms/ZonkyPlatform.ts","core/platforms/MintosPlatform.ts","core/platforms/utils.ts","components/DragAndDropFilesInput.tsx","components/platformSpecific/MintosSpecificHeaderView.tsx","components/platformSpecific/ZonkySpecificHeaderView.tsx","components/PortfolioHeaderView.tsx","components/PlatformHeaderView.tsx","components/ResultTable.tsx","components/PlatformView.tsx","components/PlatformListView.tsx","components/UploadFilesInput.tsx","components/App.tsx","index.tsx"],"names":["FileTypes","Currency","SupportedPlatformTypes","loadSelectedFile","file","cb","reader","FileReader","onerror","ex","console","log","onload","e","name","readAsArrayBuffer","getFirstWorkSheetFromRawFile","rawFile","content","Uint8Array","workbook","xlsx","read","type","Sheets","SheetNames","TwinoASFileColumnHeadersDefs","Platform","currency","monthlyResults","transactionLog","platformTotals","portfolioTotals","processingMonth","moment","this","getTransaction","transaction","dateTransaction","processingDate","isAfter","dateArray","toArray","newMonthMoment","unshift","month","result","getNewBaseResultFactory","Object","entries","transactionType","value","key","add","totals","deposit","Dinero","extraReceived","feesPaid","interestReceived","principalReceived","withdrawal","getPlatformTotals","amount","ZonkyASFileColumnHeadersDefs","TwinoPlatform","EUR","firstSheet","utils","sheet_to_json","header","dataColumnHeader","raw","blankrows","defval","range","reverse","transactionRecord","Date","getNewTransactionFactory","fullFilename","startsWith","platformFilenameSubstring","endsWith","platformFileType","platform","TWINO","XLSX","TransactionId","TransactionType","PaymentType","LoanId","ProcessingAmount","MintosASFileColumnHeadersDefs","ZonkyPlatform","CZK","ASFileColumnHeaders","headerNotFound","rowNumber","splice","Error","getAmount","plaformFeePaid","secondaryMarketFeePaid","getInterestReceived","InterestReceived","multiply","getPrincipalReceived","PrincipalReceived","penalty","subtract","isZero","penaltyReceived","rawAmount","amountPrecision","length","indexOf","intAmount","Math","abs","parseInt","replace","precision","rawPrincipalReceived","principalReceivedPrecision","principalReceivedInt","includes","ZONKY","Direction","MintosPlatform","parseFloat","Turnover","toString","Details","referalReceived","cashbackReceived","currencyExchangeFeePaid","toLowerCase","incomingCurrencyExchange","outgoingCurrencyExchange","MINTOS","Balance","DragAndDropFilesInput","event","filename","props","onRawFileUploaded","target","stopPropagation","preventDefault","dataTransfer","dropEffect","files","onLoadHandler","bind","id","onDragOver","handleDragOver","onDrop","handleFileSelect","React","Component","MintosSpecificHeaderView","platformData","campaignRewards","toFormat","ZonkySpecificHeaderView","PortfolioHeaderView","getPortfolioTotals","PlatformHeaderView","platformSpecificHeader","ResultTable","className","renderTableHeader","renderTableData","map","index","monthResult","undefined","format","toUpperCase","PlatformView","PlatformListView","platformList","portfolioPlatforms","UploadFilesInput","multiple","onChange","onFileInputChange","App","state","isPlatformFileValid","detectPlatform","parseASFile","processTransactions","setState","prevState","rawfile","handleUploadedRawFile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13deb3c9.chunk.js","sourcesContent":["export enum FileTypes {\n  XLSX = '.xlsx',\n  XLS = '.xls',\n  CSV = '.csv',\n  PDF = '.pdf'\n  // RAW_TEXT = 'raw_text'\n}\n\nexport enum Currency {\n  CZK = 'CZK',\n  EUR = 'EUR'\n}\n","import { Moment } from 'moment';\n\nimport {\n  IMintosDeposit,\n  IMintosExtraReceived,\n  IMintosFeesPaid,\n  IMintosInterestReceived,\n  IMintosWithdrawal,\n  MintosPlatform\n} from './MintosPlatform';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { IZonkyFeesPaid, IZonkyInterestReceived, ZonkyPlatform } from './ZonkyPlatform';\n\nexport type SupportedPlatform = MintosPlatform | TwinoPlatform | ZonkyPlatform;\n\nexport enum SupportedPlatformTypes {\n  MINTOS = 'mintos',\n  TWINO = 'twino',\n  ZONKY = 'zonky'\n}\n\nexport interface IPortfolioResult {\n  deposit: Dinero.Dinero;\n  withdrawal: Dinero.Dinero;\n  principalReceived: Dinero.Dinero;\n  interestReceived: Dinero.Dinero;\n  extraReceived: Dinero.Dinero;\n  feesPaid: Dinero.Dinero;\n}\n\nexport interface IGeneralDeposit {\n  deposit?: Dinero.Dinero;\n}\n\nexport interface IGeneralWithdrawal {\n  withdrawal?: Dinero.Dinero;\n}\n\nexport interface IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  deposit: Deposit;\n  withdrawal: Withdrawal;\n  principalReceived: {\n    principalReceived?: Dinero.Dinero;\n  };\n  interestReceived: InterestReceived;\n  extraReceived: ExtraReceived;\n  feesPaid: FeePaid;\n}\n\nexport interface IMonthlyResults<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  month: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport interface ITransaction<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal> {\n  processingDate: Moment;\n  result: IBaseResult<ExtraReceived, InterestReceived, FeePaid, Deposit, Withdrawal>;\n}\n\nexport type IDepositOptions = IGeneralDeposit | IMintosDeposit;\nexport type IExtraReceivedOptions = IMintosExtraReceived | {};\nexport type IFeePaidOptions = IMintosFeesPaid | IZonkyFeesPaid;\nexport type IInterestReceivedOptions = IMintosInterestReceived | IZonkyInterestReceived;\n\nexport type IWithdrawalOptions = IGeneralWithdrawal | IMintosWithdrawal;\n","import xlsx from 'xlsx';\n\nexport function loadSelectedFile(file: File, cb: (event: any, filename: string) => void) {\n  const reader = new FileReader();\n  reader.onerror = ex => {\n    // FIXME\n    console.log(ex);\n  };\n  reader.onload = (e: any) => {\n    cb(e, file.name);\n  };\n  reader.readAsArrayBuffer(file);\n}\n\nexport function getFirstWorkSheetFromRawFile(rawFile: ArrayBuffer): xlsx.WorkSheet {\n  const content = new Uint8Array(rawFile);\n  const workbook = xlsx.read(content, { type: 'array' });\n  const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n  return firstSheet;\n}\n","import moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum TwinoASFileColumnHeadersDefs {\n  Date = 'ProcessingDate',\n  TransactionId = 'TransactionId',\n  TransactionType = 'TransactionType',\n  PaymentType = 'PaymentType',\n  LoanId = 'LoanId',\n  ProcessingAmount = 'ProcessingAmount'\n}\n\nexport class TwinoPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.TWINO;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.startsWith(TwinoPlatform.platformFilenameSubstring) && fullFilename.endsWith(TwinoPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'account_statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly dataColumnHeader = [\n    TwinoASFileColumnHeadersDefs.Date,\n    TwinoASFileColumnHeadersDefs.TransactionId,\n    TwinoASFileColumnHeadersDefs.TransactionType,\n    TwinoASFileColumnHeadersDefs.PaymentType,\n    TwinoASFileColumnHeadersDefs.LoanId,\n    TwinoASFileColumnHeadersDefs.ProcessingAmount\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: TwinoPlatform.dataColumnHeader,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 3\n    });\n    this.transactionLog = transactionLog.reverse();\n  }\n\n  protected *getTransaction(): IterableIterator<ITransaction<{}, {}, {}, {}, {}>> {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[TwinoASFileColumnHeadersDefs.Date], 'MM/DD/YY HH:mm');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    };\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\n\nimport { Currency } from '../../common/enums';\n\nimport { IBaseResult, IMonthlyResults, IPortfolioResult, ITransaction } from './models';\n\nexport abstract class Platform {\n  public abstract currency: Currency;\n\n  public monthlyResults: Array<IMonthlyResults<any, any, any, any, any>> = [];\n\n  protected transactionLog: any[] = [];\n\n  private platformTotals?: IBaseResult<any, any, any, any, any>;\n  private portfolioTotals?: IPortfolioResult;\n\n  public processTransactions() {\n    let processingMonth = moment(0);\n\n    for (const transaction of this.getTransaction()) {\n      const dateTransaction = transaction.processingDate;\n\n      if (dateTransaction.isAfter(processingMonth, 'month')) {\n        const dateArray = dateTransaction.toArray();\n        const newMonthMoment = moment(`${dateArray[0]}-${dateArray[1] + 1}-01`, 'YYYY-MM-DD');\n\n        this.monthlyResults.unshift({\n          month: newMonthMoment,\n          result: this.getNewBaseResultFactory()\n        });\n        processingMonth = newMonthMoment;\n      }\n\n      for (const [transactionType, value] of Object.entries<any>(transaction.result)) {\n        for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore TODO\n          this.monthlyResults[0].result[transactionType][key] = this.monthlyResults[0].result[transactionType][key].add(result);\n        }\n      }\n    }\n  }\n\n  public getPlatformTotals() {\n    if (!this.platformTotals) {\n      const totals = this.getNewBaseResultFactory();\n      for (const month of this.monthlyResults) {\n        for (const [transactionType, value] of Object.entries<any>(month.result)) {\n          for (const [key, result] of Object.entries<Dinero.Dinero>(value)) {\n            // @ts-ignore\n            totals[transactionType][key] = totals[transactionType][key].add(result);\n          }\n        }\n      }\n      this.platformTotals = totals;\n    }\n    return this.platformTotals;\n  }\n\n  public getPortfolioTotals() {\n    if (!this.portfolioTotals) {\n      const totals: IPortfolioResult = {\n        deposit: Dinero({ currency: this.currency }),\n        extraReceived: Dinero({ currency: this.currency }),\n        feesPaid: Dinero({ currency: this.currency }),\n        interestReceived: Dinero({ currency: this.currency }),\n        principalReceived: Dinero({ currency: this.currency }),\n        withdrawal: Dinero({ currency: this.currency })\n      };\n\n      const platformTotals = this.getPlatformTotals();\n\n      for (const [transactionType, value] of Object.entries(platformTotals)) {\n        for (const [, amount] of Object.entries<Dinero.Dinero>(value)) {\n          // @ts-ignore\n          totals[transactionType] = totals[transactionType].add(amount);\n        }\n      }\n\n      this.portfolioTotals = totals;\n    }\n\n    return this.portfolioTotals;\n  }\n\n  protected abstract parseASFile(rawFile: ArrayBuffer): void;\n  protected abstract getTransaction(): IterableIterator<ITransaction<any, any, any, any, any>>;\n  protected abstract getNewBaseResultFactory(): IBaseResult<any, any, any, any, any>;\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum ZonkyASFileColumnHeadersDefs {\n  Date = 'Datum',\n  Direction = 'Příjem / Výdaj',\n  TransactionType = 'Typ transakce',\n  ProcessingAmount = 'Částka',\n  InterestReceived = 'Jistina',\n  PrincipalReceived = 'Úrok'\n}\n\nexport interface IZonkyFeesPaid {\n  plaformFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\nexport interface IZonkyInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport class ZonkyPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.ZONKY;\n\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(ZonkyPlatform.platformFilenameSubstring) && fullFilename.endsWith(ZonkyPlatform.platformFileType)\n    );\n  }\n\n  private static readonly platformFilenameSubstring = 'transakce-';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    ZonkyASFileColumnHeadersDefs.Date,\n    ZonkyASFileColumnHeadersDefs.Direction,\n    ZonkyASFileColumnHeadersDefs.TransactionType,\n    ZonkyASFileColumnHeadersDefs.ProcessingAmount,\n    ZonkyASFileColumnHeadersDefs.PrincipalReceived,\n    ZonkyASFileColumnHeadersDefs.InterestReceived\n  ];\n\n  public currency = Currency.CZK;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: ZonkyPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 4\n    });\n\n    let headerNotFound = true;\n    for (let rowNumber = 0; rowNumber < 15; rowNumber++) {\n      if (transactionLog[rowNumber][ZonkyASFileColumnHeadersDefs.Date] === ZonkyASFileColumnHeadersDefs.Date) {\n        transactionLog.splice(0, rowNumber + 1);\n        headerNotFound = false;\n        break;\n      }\n    }\n    if (headerNotFound) {\n      throw Error('Data header not found');\n    }\n    this.transactionLog = transactionLog;\n  }\n\n  public *getTransaction(): IterableIterator<\n    ITransaction<{}, IZonkyInterestReceived, IZonkyFeesPaid, IGeneralDeposit, IGeneralWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[ZonkyASFileColumnHeadersDefs.Date], 'DD.MM.YYYY');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const amount = this.getAmount(transactionRecord[ZonkyASFileColumnHeadersDefs.ProcessingAmount], Currency.CZK);\n\n      switch (transactionRecord[ZonkyASFileColumnHeadersDefs.TransactionType]) {\n        case 'Poplatek za investování':\n          transaction.result.feesPaid.plaformFeePaid = amount;\n          break;\n        case 'Nabití vaší peněženky':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'Výběr z peněženky na váš účet':\n          transaction.result.withdrawal.withdrawal = amount;\n          break;\n        case 'Poplatek za prodej na sekundárním trhu':\n          transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n          break;\n        case 'Prodej na sekundárním trhu':\n          transaction.result.principalReceived.principalReceived = amount;\n          break;\n        case 'Vrácení platby':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          ).multiply(-1);\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          ).multiply(-1);\n          break;\n\n        case 'Splátka půjčky':\n          transaction.result.interestReceived.interestReceived = this.getInterestReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.InterestReceived],\n            Currency.CZK\n          );\n          transaction.result.principalReceived.principalReceived = this.getPrincipalReceived(\n            transactionRecord[ZonkyASFileColumnHeadersDefs.PrincipalReceived],\n            Currency.CZK\n          );\n\n          const penalty = amount.subtract(\n            transaction.result.principalReceived.principalReceived.add(transaction.result.interestReceived.interestReceived)\n          );\n          if (!penalty.isZero()) {\n            transaction.result.interestReceived.penaltyReceived = penalty;\n          }\n\n          break;\n      }\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: { deposit: Dinero({ currency: this.currency }) },\n      extraReceived: {},\n      feesPaid: {\n        plaformFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {\n        principalReceived: Dinero({ currency: this.currency })\n      },\n      withdrawal: { withdrawal: Dinero({ currency: this.currency }) }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    const amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n\n  private getPrincipalReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n\n  private getInterestReceived(rawPrincipalReceived: string, currency: Currency): Dinero.Dinero {\n    const principalReceivedPrecision = rawPrincipalReceived.length - (rawPrincipalReceived.indexOf('.') + 1);\n    const principalReceivedInt = Math.abs(parseInt(rawPrincipalReceived.replace(/,/g, '').replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: principalReceivedInt,\n      precision: principalReceivedPrecision,\n      currency\n    });\n  }\n}\n","import Dinero from 'dinero.js';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { Currency, FileTypes } from '../../common/enums';\nimport { getFirstWorkSheetFromRawFile } from '../../common/utils';\n\nimport { IGeneralDeposit, IGeneralWithdrawal, ITransaction, SupportedPlatformTypes } from './models';\nimport { Platform } from './Platform';\nimport { getNewTransactionFactory } from './utils';\n\nenum MintosASFileColumnHeadersDefs {\n  TransactionId = 'TransactionId',\n  Date = 'Date',\n  Details = 'Details',\n  Turnover = 'Turnover',\n  Balance = 'Balance',\n  Currency = 'Currency'\n}\n\nexport interface IMintosDeposit extends IGeneralDeposit {\n  incomingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport interface IMintosExtraReceived {\n  referalReceived?: Dinero.Dinero;\n  cashbackReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosFeesPaid {\n  currencyExchangeFeePaid?: Dinero.Dinero;\n  secondaryMarketFeePaid?: Dinero.Dinero;\n}\n\nexport interface IMintosInterestReceived {\n  interestReceived?: Dinero.Dinero;\n  penaltyReceived?: Dinero.Dinero;\n}\n\nexport interface IMintosWithdrawal extends IGeneralWithdrawal {\n  outgoingCurrencyExchange?: Dinero.Dinero;\n}\n\nexport class MintosPlatform extends Platform {\n  public static readonly platform = SupportedPlatformTypes.MINTOS;\n  public static isPlatformFileValid(fullFilename: string): boolean {\n    return (\n      fullFilename.includes(MintosPlatform.platformFilenameSubstring) && fullFilename.endsWith(MintosPlatform.platformFileType)\n    );\n  }\n  private static readonly platformFilenameSubstring = 'account-statement';\n  private static readonly platformFileType = FileTypes.XLSX;\n  private static readonly ASFileColumnHeaders = [\n    MintosASFileColumnHeadersDefs.TransactionId,\n    MintosASFileColumnHeadersDefs.Date,\n    MintosASFileColumnHeadersDefs.Details,\n    MintosASFileColumnHeadersDefs.Turnover,\n    MintosASFileColumnHeadersDefs.Balance,\n    MintosASFileColumnHeadersDefs.Currency\n  ];\n\n  public currency = Currency.EUR;\n\n  public parseASFile(rawFile: ArrayBuffer) {\n    const firstSheet = getFirstWorkSheetFromRawFile(rawFile);\n\n    const transactionLog: any[] = xlsx.utils.sheet_to_json(firstSheet, {\n      header: MintosPlatform.ASFileColumnHeaders,\n      raw: false,\n      blankrows: false,\n      defval: 0.0,\n      range: 1\n    });\n    this.transactionLog = transactionLog;\n  }\n\n  protected *getTransaction(): IterableIterator<\n    ITransaction<IMintosExtraReceived, {}, IMintosFeesPaid, IMintosDeposit, IMintosWithdrawal>\n  > {\n    for (const transactionRecord of this.transactionLog) {\n      const processingDate = moment(transactionRecord[MintosASFileColumnHeadersDefs.Date], 'YYYY-MM-DD HH:mm:ss');\n      const transaction = getNewTransactionFactory(processingDate);\n\n      const currency = transactionRecord[MintosASFileColumnHeadersDefs.Currency];\n      const rawAmount = parseFloat(transactionRecord[MintosASFileColumnHeadersDefs.Turnover]).toString();\n\n      const amount = this.getAmount(rawAmount, currency);\n\n      switch (transactionRecord[MintosASFileColumnHeadersDefs.Details]) {\n        case 'Refer a friend bonus':\n          transaction.result.extraReceived.referalReceived = amount;\n          break;\n        case 'Cashback bonus':\n          transaction.result.extraReceived.cashbackReceived = amount;\n          break;\n        case 'Incoming client payment':\n          transaction.result.deposit.deposit = amount;\n          break;\n        case 'FX commission':\n          transaction.result.feesPaid.currencyExchangeFeePaid = amount;\n          break;\n      }\n\n      if (transactionRecord[MintosASFileColumnHeadersDefs.Details].toLowerCase().indexOf('interest income') >= 0) {\n        transaction.result.interestReceived.interestReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Secondary market fee')) {\n        transaction.result.feesPaid.secondaryMarketFeePaid = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Late payment fee income')) {\n        transaction.result.interestReceived.penaltyReceived = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Incoming currency exchange transaction')) {\n        transaction.result.deposit.incomingCurrencyExchange = amount;\n      } else if (transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Outgoing currency exchange transaction')) {\n        transaction.result.withdrawal.outgoingCurrencyExchange = amount;\n      } else if (\n        transactionRecord[MintosASFileColumnHeadersDefs.Details].startsWith('Discount/premium for secondary market transaction')\n      ) {\n        // TODO\n      }\n\n      yield transaction;\n    }\n  }\n\n  protected getNewBaseResultFactory() {\n    return {\n      deposit: {\n        deposit: Dinero({ currency: this.currency }),\n        incomingCurrencyExchange: Dinero({ currency: this.currency })\n      },\n      extraReceived: {\n        cashbackReceived: Dinero({ currency: this.currency }),\n        referalReceived: Dinero({ currency: this.currency })\n      },\n      feesPaid: {\n        currencyExchangeFeePaid: Dinero({ currency: this.currency }),\n        secondaryMarketFeePaid: Dinero({ currency: this.currency })\n      },\n      interestReceived: {\n        interestReceived: Dinero({ currency: this.currency }),\n        penaltyReceived: Dinero({ currency: this.currency })\n      },\n      principalReceived: {},\n      withdrawal: {\n        withdrawal: Dinero({ currency: this.currency }),\n        outgoingCurrencyExchange: Dinero({ currency: this.currency })\n      }\n    };\n  }\n\n  private getAmount(rawAmount: string, currency: Currency): Dinero.Dinero {\n    let amountPrecision = 0;\n    if (rawAmount.indexOf('.') >= 0) {\n      amountPrecision = rawAmount.length - (rawAmount.indexOf('.') + 1);\n    }\n    const intAmount = Math.abs(parseInt(rawAmount.replace(/\\./g, ''), 10));\n    return Dinero({\n      amount: intAmount,\n      precision: amountPrecision,\n      currency\n    });\n  }\n}\n","import { Moment } from 'moment';\n\nimport { MintosPlatform } from './MintosPlatform';\nimport { ITransaction, SupportedPlatformTypes } from './models';\nimport { TwinoPlatform } from './TwinoPlatform';\nimport { ZonkyPlatform } from './ZonkyPlatform';\n\nexport function detectPlatform(filename: string): SupportedPlatformTypes {\n  if (MintosPlatform.isPlatformFileValid(filename)) {\n    return MintosPlatform.platform;\n  } else if (TwinoPlatform.isPlatformFileValid(filename)) {\n    return TwinoPlatform.platform;\n  } else if (ZonkyPlatform.isPlatformFileValid(filename)) {\n    return ZonkyPlatform.platform;\n  } else {\n    throw new Error('unknown file');\n  }\n}\n\nexport function getNewTransactionFactory(processingDate: Moment): ITransaction<any, any, any, any, any> {\n  return {\n    processingDate,\n    result: {\n      deposit: {},\n      extraReceived: {},\n      feesPaid: {},\n      interestReceived: {},\n      principalReceived: {},\n      withdrawal: {}\n    }\n  };\n}\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass DragAndDropFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public handleDragOver(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public handleFileSelect(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = event.dataTransfer.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        id=\"drop_zone\"\n        onDragOver={e => {\n          this.handleDragOver(e);\n        }}\n        onDrop={e => this.handleFileSelect(e)}\n      >\n        Drop files here\n      </div>\n    );\n  }\n}\n\nexport default DragAndDropFilesInput;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst MintosSpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  const campaignRewards = totals.extraReceived.referalReceived.add(totals.extraReceived.cashbackReceived);\n  return (\n    <div>\n      <h2>Mintos - web statistics</h2>\n      <h4>\n        Interest homepage:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </h4>\n      <h4>\n        Late Payment Fees homepage:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </h4>\n      <h4>\n        Service fees homepage:\n        {totals.feesPaid.secondaryMarketFeePaid.add(totals.feesPaid.currencyExchangeFeePaid).toFormat()}\n      </h4>\n      <h4>\n        Campaign Rewards:\n        {campaignRewards.toFormat()}\n      </h4>\n      <h4>\n        Deposit - account statement page:\n        {totals.deposit.deposit!.add(campaignRewards).toFormat()}\n      </h4>\n      <h4>\n        Incoming Currency Exchange - account statement page:\n        {totals.deposit.incomingCurrencyExchange.toFormat()}\n      </h4>\n      <h4>\n        Outgoing Currency Exchange - account statement page:\n        {totals.withdrawal.outgoingCurrencyExchange.toFormat()}\n      </h4>\n      <h4>\n        Secondary Market Fees - account statement page:\n        {totals.feesPaid.secondaryMarketFeePaid.toFormat()}\n      </h4>\n      <h4>\n        Currency Exchange Fee - account statement page:\n        {totals.feesPaid.currencyExchangeFeePaid.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default MintosSpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from '../PlatformView';\n\nconst ZonkySpecificHeaderView = (props: PlatformDataProps) => {\n  const totals = props.platformData.getPlatformTotals();\n  return (\n    <div>\n      <h2>Zonky - web statistics</h2>\n      <h4>\n        Vyděláno :\n        {totals.interestReceived.interestReceived\n          .add(totals.interestReceived.penaltyReceived)\n          .subtract(totals.feesPaid.plaformFeePaid)\n          .subtract(totals.feesPaid.secondaryMarketFeePaid)\n          .toFormat()}\n      </h4>\n\n      <h4>\n        Zaplaceno na poplatcích:\n        {totals.feesPaid.plaformFeePaid.add(totals.feesPaid.secondaryMarketFeePaid).toFormat()}\n      </h4>\n\n      <h4>\n        Úrok zaplacený:\n        {totals.interestReceived.interestReceived.toFormat()}\n      </h4>\n      <h4>\n        Pokuty:\n        {totals.interestReceived.penaltyReceived.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default ZonkySpecificHeaderView;\n","import React from 'react';\n\nimport { PlatformDataProps } from './PlatformView';\n\nconst PortfolioHeaderView = (props: PlatformDataProps) => {\n  const portfolioTotals = props.platformData.getPortfolioTotals();\n  return (\n    <div>\n      <h2>Unified Totals</h2>\n      <h4>\n        Deposit:\n        {portfolioTotals.deposit.toFormat()}\n      </h4>\n      <h4>\n        Withdrawal:\n        {portfolioTotals.withdrawal.toFormat()}\n      </h4>\n      <h4>\n        Principal received:\n        {portfolioTotals.principalReceived!.toFormat()}\n      </h4>\n      <h4>\n        Interests:\n        {portfolioTotals.interestReceived!.toFormat()}\n      </h4>\n      <h4>\n        Fees paid:\n        {portfolioTotals.feesPaid!.toFormat()}\n      </h4>\n      <h4>\n        Extra received:\n        {portfolioTotals.extraReceived!.toFormat()}\n      </h4>\n    </div>\n  );\n};\n\nexport default PortfolioHeaderView;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport MintosSpecificHeaderView from './platformSpecific/MintosSpecificHeaderView';\nimport ZonkySpecificHeaderView from './platformSpecific/ZonkySpecificHeaderView';\nimport { PlatformDataProps } from './PlatformView';\nimport PortfolioHeaderView from './PortfolioHeaderView';\n\nconst PlatformHeaderView = (props: PlatformDataProps) => {\n  let platformSpecificHeader;\n\n  if (props.platformData instanceof MintosPlatform) {\n    platformSpecificHeader = <MintosSpecificHeaderView platformData={props.platformData} />;\n  } else if (props.platformData instanceof ZonkyPlatform) {\n    platformSpecificHeader = <ZonkySpecificHeaderView platformData={props.platformData} />;\n  }\n\n  return (\n    <div>\n      <hr />\n      <PortfolioHeaderView platformData={props.platformData} />\n      <hr />\n      {platformSpecificHeader}\n      <hr />\n    </div>\n  );\n};\nexport default PlatformHeaderView;\n","import Dinero from 'dinero.js';\nimport React from 'react';\n\nimport {\n  IDepositOptions,\n  IExtraReceivedOptions,\n  IFeePaidOptions,\n  IInterestReceivedOptions,\n  IMonthlyResults,\n  IWithdrawalOptions\n} from '../core/platforms/models';\n\nimport { PlatformDataProps } from './PlatformView';\n\nclass ResultTable extends React.Component<PlatformDataProps> {\n  public render() {\n    return (\n      <div>\n        <table className=\"ui celled table\" id=\"students\">\n          <thead>\n            <tr>{this.renderTableHeader()}</tr>\n          </thead>\n          <tbody>{this.renderTableData()}</tbody>\n        </table>\n      </div>\n    );\n  }\n\n  private renderTableData() {\n    if (this.props.platformData.monthlyResults.length > 0) {\n      return this.props.platformData.monthlyResults.map(\n        (\n          month: IMonthlyResults<\n            IExtraReceivedOptions,\n            IInterestReceivedOptions,\n            IFeePaidOptions,\n            IDepositOptions,\n            IWithdrawalOptions\n          >,\n          index: any\n        ) => {\n          const monthResult = {\n            deposit: undefined,\n            withdrawal: undefined,\n            feesPaid: undefined,\n            extraReceived: undefined,\n            interestReceived: undefined\n          } as any;\n\n          for (const [transactionType, value] of Object.entries(month.result)) {\n            for (const [, result] of Object.entries<Dinero.Dinero>(value)) {\n              if (monthResult[transactionType]) {\n                monthResult[transactionType] = monthResult[transactionType].add(result);\n              } else {\n                monthResult[transactionType] = result;\n              }\n            }\n          }\n\n          return (\n            <tr key={index}>\n              <td>{month.month.format('MMM YYYY')}</td>\n              <td>{monthResult.deposit ? monthResult.deposit.toFormat() : ''}</td>\n              <td>{monthResult.withdrawal ? monthResult.withdrawal.toFormat() : ''}</td>\n              <td>{monthResult.interestReceived ? monthResult.interestReceived.toFormat() : ''}</td>\n              <td>{monthResult.feesPaid ? monthResult.feesPaid.toFormat() : ''}</td>\n              <td>{monthResult.extraReceived ? monthResult.extraReceived.toFormat() : ''}</td>\n            </tr>\n          );\n        }\n      );\n    } else {\n      return <tr key={0} />;\n    }\n  }\n\n  private renderTableHeader() {\n    return ['date', 'deposit', 'withdrawal', 'interestReceived', 'feesPaid', 'extraReceived'].map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  }\n}\n\nexport default ResultTable;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformHeaderView from './PlatformHeaderView';\nimport ResultTable from './ResultTable';\n\nexport type PlatformDataProps = {\n  platformData: SupportedPlatform;\n};\n\nconst PlatformView = (props: PlatformDataProps) => {\n  return (\n    <div>\n      <PlatformHeaderView platformData={props.platformData} />\n      <ResultTable platformData={props.platformData} />\n    </div>\n  );\n};\n\nexport default PlatformView;\n","import React from 'react';\n\nimport { SupportedPlatform } from '../core/platforms/models';\n\nimport PlatformView from './PlatformView';\n\nexport type PortfolioPlatformsProps = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nconst PlatformListView = (props: PortfolioPlatformsProps) => {\n  const platformList = props.portfolioPlatforms.map((platform: SupportedPlatform, index: number) => {\n    return <PlatformView key={index} platformData={platform} />;\n  });\n\n  return <div className=\"platform-list\">{platformList}</div>;\n};\n\nexport default PlatformListView;\n","import React from 'react';\n\nimport { loadSelectedFile } from '../common/utils';\n\nimport { RawFileUploadedProps } from './App';\n\nclass UploadFilesInput extends React.Component<RawFileUploadedProps> {\n  public onLoadHandler(event: any, filename: string) {\n    this.props.onRawFileUploaded(event.target.result, filename);\n  }\n\n  public onFileInputChange(event: any) {\n    const files = event.target.files;\n\n    this.onLoadHandler = this.onLoadHandler.bind(this);\n    for (const file of files) {\n      loadSelectedFile(file, this.onLoadHandler);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"ui segment\">\n        <input\n          type=\"file\"\n          multiple={true}\n          onChange={e => {\n            this.onFileInputChange(e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadFilesInput;\n","import React from 'react';\n\nimport { MintosPlatform } from '../core/platforms/MintosPlatform';\nimport { SupportedPlatform, SupportedPlatformTypes } from '../core/platforms/models';\nimport { TwinoPlatform } from '../core/platforms/TwinoPlatform';\nimport { detectPlatform } from '../core/platforms/utils';\nimport { ZonkyPlatform } from '../core/platforms/ZonkyPlatform';\n\nimport DragAndDropFilesInput from './DragAndDropFilesInput';\nimport PlatformListView from './PlatformListView';\nimport UploadFilesInput from './UploadFilesInput';\n\nexport type RawFileUploadedProps = {\n  onRawFileUploaded: (rawFile: ArrayBuffer, filename: string) => void;\n};\n\ntype AppState = {\n  portfolioPlatforms: (SupportedPlatform)[];\n};\n\nclass App extends React.Component<{}, AppState> {\n  public state = { portfolioPlatforms: [] };\n\n  public handleUploadedRawFile(rawFile: ArrayBuffer, filename: string) {\n    try {\n      const platformType = detectPlatform(filename);\n      let platformData: SupportedPlatform;\n\n      switch (platformType) {\n        case SupportedPlatformTypes.MINTOS:\n          platformData = new MintosPlatform();\n          break;\n        case SupportedPlatformTypes.TWINO:\n          platformData = new TwinoPlatform();\n          break;\n        case SupportedPlatformTypes.ZONKY:\n          platformData = new ZonkyPlatform();\n          break;\n        default:\n          throw Error('unknown platform');\n      }\n\n      platformData.parseASFile(rawFile);\n      platformData.processTransactions();\n\n      this.setState(prevState => ({\n        portfolioPlatforms: [...prevState.portfolioPlatforms, platformData]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div>\n          <h4> There is no backend for this service, all data is stored only your browser. (Except analytics for web usage)</h4>\n          When you refresh the page, all data is lost.\n          <ul>\n            <li> Pro Zonky, stahnete vypis z penezenky a naimportujte jej sem.</li>\n            <li>\n              For Mintos, go to Account Statement tab in your account, for Start Date filter put there some day very long time ago\n              (eg.g 11.12.2013), hit Search. Below a first table, there is button Download Selected List. Download the file and\n              import that file here.\n            </li>\n          </ul>\n          <UploadFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          <DragAndDropFilesInput onRawFileUploaded={(rawfile, filename) => this.handleUploadedRawFile(rawfile, filename)} />\n          Account statements: {this.state.portfolioPlatforms ? this.state.portfolioPlatforms.length : '0'}\n        </div>\n        <div>\n          <PlatformListView portfolioPlatforms={this.state.portfolioPlatforms} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}